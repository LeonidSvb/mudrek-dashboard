import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';

dotenv.config();

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º service key –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

class SupabaseSync {
    constructor() {
        console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    }

    // –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase
    async createTables() {
        console.log('üèóÔ∏è  –°–æ–∑–¥–∞—é SQL —Ñ–∞–π–ª—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü...');

        // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        return await this.createTablesAlternative();
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    async createTablesAlternative() {
        console.log('üìù –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQL Editor...');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL –≤ —Ñ–∞–π–ª—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const contactsSQL = `-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ HubSpot
CREATE TABLE IF NOT EXISTS hubspot_contacts (
    id BIGSERIAL PRIMARY KEY,
    hubspot_id TEXT UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    -- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    email TEXT,
    firstname TEXT,
    lastname TEXT,
    phone TEXT,
    company TEXT,

    -- –î–∞—Ç—ã
    createdate TIMESTAMP WITH TIME ZONE,
    lastmodifieddate TIMESTAMP WITH TIME ZONE,

    -- –°—Ç–∞—Ç—É—Å—ã
    lifecyclestage TEXT,
    hs_lead_status TEXT,

    -- –í–ª–∞–¥–µ–ª–µ—Ü
    hubspot_owner_id TEXT,

    -- –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON
    raw_data JSONB
);

-- –ò–Ω–¥–µ–∫—Å—ã
CREATE INDEX IF NOT EXISTS idx_contacts_hubspot_id ON hubspot_contacts(hubspot_id);
CREATE INDEX IF NOT EXISTS idx_contacts_email ON hubspot_contacts(email);
CREATE INDEX IF NOT EXISTS idx_contacts_updated ON hubspot_contacts(updated_at);`;

        const dealsSQL = `-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–¥–µ–ª–æ–∫ HubSpot
CREATE TABLE IF NOT EXISTS hubspot_deals (
    id BIGSERIAL PRIMARY KEY,
    hubspot_id TEXT UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    -- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    dealname TEXT,
    amount NUMERIC,
    dealstage TEXT,
    pipeline TEXT,

    -- –î–∞—Ç—ã
    createdate TIMESTAMP WITH TIME ZONE,
    closedate TIMESTAMP WITH TIME ZONE,
    hs_lastmodifieddate TIMESTAMP WITH TIME ZONE,

    -- –í–ª–∞–¥–µ–ª–µ—Ü
    hubspot_owner_id TEXT,

    -- –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
    payment_method TEXT,
    payment_type TEXT,
    deal_whole_amount NUMERIC,
    the_left_amount NUMERIC,
    installment_monthly_amount NUMERIC,
    number_of_installments__months INTEGER,
    date_of_last_installment DATE,
    number_of_already_paid_installments INTEGER,
    number_of_left_installments INTEGER,
    payment_status TEXT,
    phone_number TEXT,

    -- –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON
    raw_data JSONB
);

-- –ò–Ω–¥–µ–∫—Å—ã
CREATE INDEX IF NOT EXISTS idx_deals_hubspot_id ON hubspot_deals(hubspot_id);
CREATE INDEX IF NOT EXISTS idx_deals_amount ON hubspot_deals(amount);
CREATE INDEX IF NOT EXISTS idx_deals_stage ON hubspot_deals(dealstage);
CREATE INDEX IF NOT EXISTS idx_deals_updated ON hubspot_deals(updated_at);
CREATE INDEX IF NOT EXISTS idx_deals_close_date ON hubspot_deals(closedate);`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL —Ñ–∞–π–ª—ã
        fs.writeFileSync('supabase-contacts-table.sql', contactsSQL);
        fs.writeFileSync('supabase-deals-table.sql', dealsSQL);

        console.log('üìÅ SQL —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:');
        console.log('   üìã supabase-contacts-table.sql');
        console.log('   üíº supabase-deals-table.sql');
        console.log('');
        console.log('üîß –ù–£–ñ–ù–û –í–´–ü–û–õ–ù–ò–¢–¨ –í–†–£–ß–ù–£–Æ:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase ‚Üí SQL Editor');
        console.log('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ supabase-contacts-table.sql –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ');
        console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ supabase-deals-table.sql –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ');

        return false; // –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
    async syncContactsFromFile(filename = 'contacts-with-all-properties.json') {
        try {
            console.log(`üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ ${filename}...`);

            if (!fs.existsSync(filename)) {
                throw new Error(`–§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            const fileData = JSON.parse(fs.readFileSync(filename, 'utf8'));
            const contacts = fileData.contacts || fileData;

            console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${contacts.length}`);

            for (const contact of contacts) {
                const contactData = {
                    hubspot_id: contact.id,
                    email: contact.properties.email,
                    firstname: contact.properties.firstname,
                    lastname: contact.properties.lastname,
                    phone: contact.properties.phone,
                    company: contact.properties.company,
                    createdate: contact.properties.createdate,
                    lastmodifieddate: contact.properties.lastmodifieddate,
                    lifecyclestage: contact.properties.lifecyclestage,
                    hs_lead_status: contact.properties.hs_lead_status,
                    hubspot_owner_id: contact.properties.hubspot_owner_id,
                    raw_data: contact
                };

                const { error } = await supabase
                    .from('hubspot_contacts')
                    .upsert(contactData, { onConflict: 'hubspot_id' });

                if (error) {
                    console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${contact.id}:`, error);
                }
            }

            console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error.message);
            return false;
        }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
    async syncDealsFromFile(filename = 'deals-with-all-properties.json') {
        try {
            console.log(`üíº –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å–¥–µ–ª–∫–∏ –∏–∑ ${filename}...`);

            if (!fs.existsSync(filename)) {
                throw new Error(`–§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            const fileData = JSON.parse(fs.readFileSync(filename, 'utf8'));
            const deals = fileData.deals || fileData;

            console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${deals.length}`);

            for (const deal of deals) {
                const dealData = {
                    hubspot_id: deal.id,
                    dealname: deal.properties.dealname,
                    amount: deal.properties.amount ? parseFloat(deal.properties.amount) : null,
                    dealstage: deal.properties.dealstage,
                    pipeline: deal.properties.pipeline,
                    createdate: deal.properties.createdate,
                    closedate: deal.properties.closedate,
                    hs_lastmodifieddate: deal.properties.hs_lastmodifieddate,
                    hubspot_owner_id: deal.properties.hubspot_owner_id,

                    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
                    payment_method: deal.properties.payment_method,
                    payment_type: deal.properties.payment_type,
                    deal_whole_amount: deal.properties.deal_whole_amount ? parseFloat(deal.properties.deal_whole_amount) : null,
                    the_left_amount: deal.properties.the_left_amount ? parseFloat(deal.properties.the_left_amount) : null,
                    installment_monthly_amount: deal.properties.installment_monthly_amount ? parseFloat(deal.properties.installment_monthly_amount) : null,
                    number_of_installments__months: deal.properties.number_of_installments__months ? parseInt(deal.properties.number_of_installments__months) : null,
                    date_of_last_installment: deal.properties.date_of_last_installment,
                    number_of_already_paid_installments: deal.properties.number_of_already_paid_installments ? parseInt(deal.properties.number_of_already_paid_installments) : null,
                    number_of_left_installments: deal.properties.number_of_left_installments ? parseInt(deal.properties.number_of_left_installments) : null,
                    payment_status: deal.properties.payment_status,
                    phone_number: deal.properties.phone_number,

                    raw_data: deal
                };

                const { error } = await supabase
                    .from('hubspot_deals')
                    .upsert(dealData, { onConflict: 'hubspot_id' });

                if (error) {
                    console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏ ${deal.id}:`, error);
                }
            }

            console.log('‚úÖ –°–¥–µ–ª–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫:', error.message);
            return false;
        }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    async testConnection() {
        try {
            console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');

            const { data, error } = await supabase
                .from('hubspot_contacts')
                .select('count')
                .limit(1);

            if (error) {
                console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
                return false;
            }

            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
            return false;
        }
    }

    // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async fullSync() {
        console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò HUBSPOT ‚Üí SUPABASE\n');

        try {
            // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await this.testConnection();

            // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            await this.createTables();

            // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const contactsSuccess = await this.syncContactsFromFile();
            const dealsSuccess = await this.syncDealsFromFile();

            console.log('\nüéâ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
            console.log(`üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${contactsSuccess ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);
            console.log(`üíº –°–¥–µ–ª–∫–∏: ${dealsSuccess ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);

            return contactsSuccess && dealsSuccess;

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
            return false;
        }
    }
}

export { SupabaseSync };

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    const sync = new SupabaseSync();
    sync.fullSync();
}