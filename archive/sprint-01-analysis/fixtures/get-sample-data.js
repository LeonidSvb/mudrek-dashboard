import dotenv from 'dotenv';
import fs from 'fs';
import fetch from 'node-fetch';

dotenv.config();

const API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

class SampleDataCollector {
    constructor() {
        if (!API_KEY) {
            console.error('–û—à–∏–±–∫–∞: HUBSPOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            process.exit(1);
        }
    }

    async makeRequest(url) {
        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status} - ${await response.text()}`);
        }

        return await response.json();
    }

    async getDealsProperties() {
        try {
            const response = await this.makeRequest(`${BASE_URL}/crm/v3/properties/deals`);
            return response.results.map(prop => prop.name);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —Å–¥–µ–ª–æ–∫:', error);
            return [];
        }
    }

    async getContactsProperties() {
        try {
            const response = await this.makeRequest(`${BASE_URL}/crm/v3/properties/contacts`);
            return response.results.map(prop => prop.name);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
            return [];
        }
    }

    async getSampleDeals(limit = 10) {
        try {
            console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —Å–¥–µ–ª–æ–∫...');
            const properties = await this.getDealsProperties();

            console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ ${limit} –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫...`);
            const propertiesParam = properties.join(',');

            const response = await this.makeRequest(
                `${BASE_URL}/crm/v3/objects/deals?limit=${limit}&properties=${propertiesParam}`
            );

            const sampleData = {
                total: response.results.length,
                properties_count: properties.length,
                available_properties: properties.slice(0, 50), // –ü–µ—Ä–≤—ã–µ 50 –¥–ª—è –æ–±–∑–æ—Ä–∞
                deals: response.results
            };

            fs.writeFileSync('sample-deals.json', JSON.stringify(sampleData, null, 2));
            console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${response.results.length} –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫ –≤ sample-deals.json`);

            return sampleData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫:', error);
            return null;
        }
    }

    async getSampleContacts(limit = 10) {
        try {
            console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...');
            const properties = await this.getContactsProperties();

            console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ ${limit} –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...`);
            const propertiesParam = properties.join(',');

            const response = await this.makeRequest(
                `${BASE_URL}/crm/v3/objects/contacts?limit=${limit}&properties=${propertiesParam}`
            );

            const sampleData = {
                total: response.results.length,
                properties_count: properties.length,
                available_properties: properties.slice(0, 50), // –ü–µ—Ä–≤—ã–µ 50 –¥–ª—è –æ–±–∑–æ—Ä–∞
                contacts: response.results
            };

            fs.writeFileSync('sample-contacts.json', JSON.stringify(sampleData, null, 2));
            console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${response.results.length} –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ sample-contacts.json`);

            return sampleData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
            return null;
        }
    }

    async collectAll() {
        console.log('üîç –°–±–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HubSpot...\n');

        const deals = await this.getSampleDeals(10);
        const contacts = await this.getSampleContacts(10);

        if (deals && contacts) {
            console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã:');
            console.log(`üìÑ sample-deals.json: ${deals.total} —Å–¥–µ–ª–æ–∫, ${deals.properties_count} —Å–≤–æ–π—Å—Ç–≤`);
            console.log(`üìÑ sample-contacts.json: ${contacts.total} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, ${contacts.properties_count} —Å–≤–æ–π—Å—Ç–≤`);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    }
}

const collector = new SampleDataCollector();
collector.collectAll();