import 'dotenv/config';

const HUBSPOT_API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 200 calls - –∫ —á–µ–º—É –æ–Ω–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã
 */
async function analyzeCallsAssociations() {
  console.log('=== –ê–ù–ê–õ–ò–ó 200 CALLS - –ö –ß–ï–ú–£ –ü–†–ò–í–Ø–ó–ê–ù–´ ===\n');

  let allCalls = [];
  let after = null;
  let pageCount = 0;

  // –ü–æ–ª—É—á–∞–µ–º 200 calls —Å associations
  while (allCalls.length < 200) {
    pageCount++;
    let url = `${BASE_URL}/crm/v3/objects/calls?limit=100&associations=contacts,deals`;
    if (after) url += `&after=${after}`;

    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${HUBSPOT_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const data = await response.json();
    allCalls = allCalls.concat(data.results);

    console.log(`‚Üí Page ${pageCount}: fetched ${data.results.length} calls (total: ${allCalls.length})`);

    if (data.paging?.next && allCalls.length < 200) {
      after = data.paging.next.after;
    } else {
      break;
    }
  }

  // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 200
  allCalls = allCalls.slice(0, 200);

  console.log(`\n‚úì –í—Å–µ–≥–æ calls –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${allCalls.length}\n`);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º associations
  let stats = {
    total: allCalls.length,
    hasContacts: 0,
    hasDeals: 0,
    hasBoth: 0,
    hasNone: 0,
    contactsOnly: 0,
    dealsOnly: 0
  };

  const samples = {
    contactsOnly: [],
    dealsOnly: [],
    both: [],
    none: []
  };

  allCalls.forEach(call => {
    const hasContacts = call.associations?.contacts?.results?.length > 0;
    const hasDeals = call.associations?.deals?.results?.length > 0;

    if (hasContacts) stats.hasContacts++;
    if (hasDeals) stats.hasDeals++;

    if (hasContacts && hasDeals) {
      stats.hasBoth++;
      if (samples.both.length < 3) samples.both.push(call);
    } else if (hasContacts && !hasDeals) {
      stats.contactsOnly++;
      if (samples.contactsOnly.length < 3) samples.contactsOnly.push(call);
    } else if (!hasContacts && hasDeals) {
      stats.dealsOnly++;
      if (samples.dealsOnly.length < 3) samples.dealsOnly.push(call);
    } else {
      stats.hasNone++;
      if (samples.none.length < 3) samples.none.push(call);
    }
  });

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('           –°–¢–ê–¢–ò–°–¢–ò–ö–ê CALLS            ');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  console.log(`üìä –í—Å–µ–≥–æ calls: ${stats.total}\n`);

  console.log('–ü—Ä–∏–≤—è–∑–∫–∞ –∫ objects:');
  console.log(`  üìá –ü—Ä–∏–≤—è–∑–∞–Ω—ã –∫ CONTACTS: ${stats.hasContacts} (${(stats.hasContacts/stats.total*100).toFixed(1)}%)`);
  console.log(`  üíº –ü—Ä–∏–≤—è–∑–∞–Ω—ã –∫ DEALS:    ${stats.hasDeals} (${(stats.hasDeals/stats.total*100).toFixed(1)}%)`);
  console.log();

  console.log('–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞:');
  console.log(`  üìá –¢–æ–ª—å–∫–æ –∫ CONTACTS:    ${stats.contactsOnly} (${(stats.contactsOnly/stats.total*100).toFixed(1)}%)`);
  console.log(`  üíº –¢–æ–ª—å–∫–æ –∫ DEALS:       ${stats.dealsOnly} (${(stats.dealsOnly/stats.total*100).toFixed(1)}%)`);
  console.log(`  üîó –ö –û–ë–û–ò–ú (contacts+deals): ${stats.hasBoth} (${(stats.hasBoth/stats.total*100).toFixed(1)}%)`);
  console.log(`  ‚ùå –ù–ò –ö –ß–ï–ú–£:            ${stats.hasNone} (${(stats.hasNone/stats.total*100).toFixed(1)}%)`);

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('              –ü–†–ò–ú–ï–†–´                  ');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  if (samples.contactsOnly.length > 0) {
    console.log('üìá –ü–†–ò–ú–ï–†: Call –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ –∫ CONTACT\n');
    const call = samples.contactsOnly[0];
    console.log(`Call ID: ${call.id}`);
    console.log(`Contacts: ${call.associations.contacts.results.length} –∫–æ–Ω—Ç–∞–∫—Ç(–æ–≤)`);
    console.log(`Contact IDs: ${call.associations.contacts.results.map(c => c.id).join(', ')}`);
    console.log(`Deals: –ù–ï–¢\n`);
  }

  if (samples.dealsOnly.length > 0) {
    console.log('üíº –ü–†–ò–ú–ï–†: Call –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ –∫ DEAL\n');
    const call = samples.dealsOnly[0];
    console.log(`Call ID: ${call.id}`);
    console.log(`Contacts: –ù–ï–¢`);
    console.log(`Deals: ${call.associations.deals.results.length} —Å–¥–µ–ª–æ–∫`);
    console.log(`Deal IDs: ${call.associations.deals.results.map(d => d.id).join(', ')}\n`);
  }

  if (samples.both.length > 0) {
    console.log('üîó –ü–†–ò–ú–ï–†: Call –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –û–ë–û–ò–ú (contact + deal)\n');
    const call = samples.both[0];
    console.log(`Call ID: ${call.id}`);
    console.log(`Contacts: ${call.associations.contacts.results.length} –∫–æ–Ω—Ç–∞–∫—Ç(–æ–≤)`);
    console.log(`Contact IDs: ${call.associations.contacts.results.map(c => c.id).join(', ')}`);
    console.log(`Deals: ${call.associations.deals.results.length} —Å–¥–µ–ª–æ–∫`);
    console.log(`Deal IDs: ${call.associations.deals.results.map(d => d.id).join(', ')}\n`);
  }

  if (samples.none.length > 0) {
    console.log('‚ùå –ü–†–ò–ú–ï–†: Call –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ —á–µ–º—É\n');
    const call = samples.none[0];
    console.log(`Call ID: ${call.id}`);
    console.log(`Associations: –ù–ï–¢\n`);
  }

  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('              –í–´–í–û–î–´                   ');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  if (stats.hasContacts > stats.total * 0.9) {
    console.log('‚úÖ –í–´–í–û–î: –ü–æ—á—Ç–∏ –≤—Å–µ calls –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ CONTACTS');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –•—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑—å call ‚Üí contact\n');
  }

  if (stats.hasDeals > stats.total * 0.5) {
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ–ª—å—à–µ 50% calls —Ç–∞–∫–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ DEALS');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –•—Ä–∞–Ω–∏—Ç—å –æ–±–µ —Å–≤—è–∑–∏ (call ‚Üí contact, call ‚Üí deal)\n');
  }

  if (stats.hasBoth > stats.total * 0.3) {
    console.log('üîó –í–ê–ñ–ù–û: –ú–Ω–æ–≥–æ calls –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –û–ë–û–ò–ú –æ–±—ä–µ–∫—Ç–∞–º');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSONB –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö associations\n');
  }

  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –°–¢–†–£–ö–¢–£–†–ï –¢–ê–ë–õ–ò–¶–´:\n');
  console.log('CREATE TABLE hubspot_calls_raw (');
  console.log('    hubspot_id TEXT PRIMARY KEY,');
  console.log('    call_duration INTEGER,');
  console.log('    call_direction TEXT,');
  console.log('    call_timestamp TIMESTAMP,');
  console.log('    raw_json JSONB NOT NULL,  -- —Å–æ–¥–µ—Ä–∂–∏—Ç associations –∫ contacts –ò deals');
  console.log('    synced_at TIMESTAMP');
  console.log(');\n');

  console.log('-- –ü–æ—Ç–æ–º –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ SQL:');
  console.log('SELECT ');
  console.log('  hubspot_id,');
  console.log('  raw_json->\'associations\'->\'contacts\'->\'results\'->0->>\'id\' as contact_id,');
  console.log('  raw_json->\'associations\'->\'deals\'->\'results\'->0->>\'id\' as deal_id');
  console.log('FROM hubspot_calls_raw;\n');
}

analyzeCallsAssociations().catch(console.error);
