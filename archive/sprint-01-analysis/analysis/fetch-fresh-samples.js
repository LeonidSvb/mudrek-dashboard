import 'dotenv/config';

const HUBSPOT_API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

async function fetchFromHubSpot(endpoint, limit = 10, properties = []) {
  let url = `${BASE_URL}${endpoint}?limit=${limit}&archived=false`;

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã properties, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–ø—Ä–æ—Å
  if (properties.length > 0) {
    const propsParam = properties.map(p => `properties=${p}`).join('&');
    url += `&${propsParam}`;
  }

  const response = await fetch(url, {
    headers: {
      'Authorization': `Bearer ${HUBSPOT_API_KEY}`,
      'Content-Type': 'application/json'
    }
  });

  if (!response.ok) {
    throw new Error(`HubSpot API error: ${response.status} ${response.statusText}`);
  }

  return await response.json();
}

console.log('=== –ó–ê–ü–†–û–° –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–• –ò–ó HUBSPOT ===\n');

// –°–ø–∏—Å–æ–∫ properties –¥–ª—è deals
const dealProperties = [
  'amount', 'dealstage', 'dealname', 'pipeline', 'createdate', 'closedate',
  'hs_lastmodifieddate', 'qualified_status', 'trial_status', 'vsl_watched',
  'number_of_installments__months', 'payment_method', 'payment_type', 'payment_status',
  'deal_whole_amount', 'the_left_amount', 'installment_monthly_amount',
  'date_of_last_installment', 'number_of_already_paid_installments',
  'number_of_left_installments', 'phone_number', 'hubspot_owner_id'
];

// –°–ø–∏—Å–æ–∫ properties –¥–ª—è contacts
const contactProperties = [
  'email', 'firstname', 'lastname', 'phone', 'company', 'createdate',
  'lastmodifieddate', 'lifecyclestage', 'hs_lead_status', 'hubspot_owner_id',
  'vsl_watched', 'sales_script_version'
];

// –°–ø–∏—Å–æ–∫ properties –¥–ª—è calls
const callProperties = [
  'hs_call_duration', 'hs_call_direction', 'hs_call_disposition', 'hs_call_body',
  'hs_timestamp', 'hs_call_recording_url', 'hs_call_from_number', 'hs_call_to_number',
  'hs_call_status', 'hs_call_title', 'hs_createdate', 'hs_lastmodifieddate'
];

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 10 deals —Å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏
console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º 10 deals —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏...');
const dealsResponse = await fetchFromHubSpot('/crm/v3/objects/deals', 10, dealProperties);
console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${dealsResponse.results.length} deals\n`);

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 10 contacts
console.log('üìá –ó–∞–≥—Ä—É–∂–∞–µ–º 10 contacts —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏...');
const contactsResponse = await fetchFromHubSpot('/crm/v3/objects/contacts', 10, contactProperties);
console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${contactsResponse.results.length} contacts\n`);

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 10 calls
console.log('üìû –ó–∞–≥—Ä—É–∂–∞–µ–º 10 calls —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏...');
const callsResponse = await fetchFromHubSpot('/crm/v3/objects/calls', 10, callProperties);
console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${callsResponse.results.length} calls\n`);

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
console.log('=== –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• ===\n');

console.log('--- DEAL SAMPLE ---');
const sampleDeal = dealsResponse.results[0];
console.log('ID:', sampleDeal.id);
console.log('Properties:', Object.keys(sampleDeal.properties).sort().slice(0, 30));
console.log('\n–í—Å–µ properties deal:');
console.log(JSON.stringify(sampleDeal.properties, null, 2));

console.log('\n\n--- CONTACT SAMPLE ---');
const sampleContact = contactsResponse.results[0];
console.log('ID:', sampleContact.id);
console.log('Properties (–ø–µ—Ä–≤—ã–µ 30):', Object.keys(sampleContact.properties).sort().slice(0, 30));

console.log('\n\n--- CALL SAMPLE ---');
const sampleCall = callsResponse.results[0];
console.log('ID:', sampleCall.id);
console.log('Properties:', Object.keys(sampleCall.properties).sort());
console.log('\nCall properties:');
console.log(JSON.stringify(sampleCall.properties, null, 2));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –¥–ª—è 22 –º–µ—Ç—Ä–∏–∫
console.log('\n\n=== –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –î–õ–Ø 22 –ú–ï–¢–†–ò–ö ===\n');

const dealProps = Object.keys(sampleDeal.properties);
const contactProps = Object.keys(sampleContact.properties);
const callProps = Object.keys(sampleCall.properties);

const requiredFields = {
  deals: [
    'amount',
    'dealstage',
    'qualified_status',
    'trial_status',
    'vsl_watched',
    'number_of_installments__months',
    'createdate',
    'closedate',
    'hs_lastmodifieddate'
  ],
  contacts: [
    'createdate',
    'vsl_watched',
    'email',
    'phone'
  ],
  calls: [
    'hs_call_duration',
    'hs_call_direction',
    'hs_call_disposition',
    'hs_call_body',
    'hs_timestamp',
    'hs_call_recording_url'
  ]
};

console.log('üìä DEALS:');
requiredFields.deals.forEach(field => {
  const exists = dealProps.includes(field);
  const value = sampleDeal.properties[field];
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${field}${value ? `: ${value}` : ''}`);
});

console.log('\nüìá CONTACTS:');
requiredFields.contacts.forEach(field => {
  const exists = contactProps.includes(field);
  const value = sampleContact.properties[field];
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${field}${value ? `: ${value}` : ''}`);
});

console.log('\nüìû CALLS:');
requiredFields.calls.forEach(field => {
  const exists = callProps.includes(field);
  const value = sampleCall.properties[field];
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${field}${value ? `: ${String(value).substring(0, 50)}` : ''}`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º associations
console.log('\n\n=== ASSOCIATIONS (–°–í–Ø–ó–ò) ===\n');
console.log('Deal associations:', sampleDeal.associations ? Object.keys(sampleDeal.associations) : '–ù–ï–¢');
console.log('Contact associations:', sampleContact.associations ? Object.keys(sampleContact.associations) : '–ù–ï–¢');
console.log('Call associations:', sampleCall.associations ? Object.keys(sampleCall.associations) : '–ù–ï–¢');

console.log('\n=== –í–´–í–û–î ===');
console.log('–¢–µ–ø–µ—Ä—å –≤–∏–¥–∏–º —á—Ç–æ:');
console.log('1. –ö–∞–∫–∏–µ –ø–æ–ª—è –£–ñ–ï –µ—Å—Ç—å –≤ HubSpot');
console.log('2. –ö–∞–∫–∏–µ –ø–æ–ª—è –ù–£–ñ–ù–û —Å–æ–∑–¥–∞—Ç—å');
console.log('3. –ö–∞–∫ —Å–≤—è–∑–∞–Ω—ã –æ–±—ä–µ–∫—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π');
console.log('\n–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å SQL —Å—Ö–µ–º—É.');
