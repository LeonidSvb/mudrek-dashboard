import dotenv from 'dotenv';
import fetch from 'node-fetch';

dotenv.config();

const API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

class DealFieldChecker {
    constructor() {
        this.dealId = '44396763167'; // ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
        this.contactId = '158039844455'; // ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    }

    async makeRequest(url) {
        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        return await response.json();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏
    async getDealDetails() {
        try {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–¥–µ–ª–∫—É ID: ${this.dealId}\n`);

            // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–≤–æ–π—Å—Ç–≤–∞ —Å–¥–µ–ª–∫–∏
            const deal = await this.makeRequest(`${BASE_URL}/crm/v3/objects/deals/${this.dealId}?properties=trial_status,qualified_status,dealname,amount,dealstage`);

            console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ GET –ó–ê–ü–†–û–°–ê:');
            console.log('=====================================');
            console.log('ID —Å–¥–µ–ª–∫–∏:', deal.id);
            console.log('–ù–∞–∑–≤–∞–Ω–∏–µ:', deal.properties.dealname);
            console.log('–°—É–º–º–∞:', deal.properties.amount);
            console.log('–≠—Ç–∞–ø:', deal.properties.dealstage);

            console.log('\nüéØ –ù–û–í–´–ï –ü–û–õ–Ø:');
            console.log('trial_status:', deal.properties.trial_status || '–ù–ï –ó–ê–ü–û–õ–ù–ï–ù–û');
            console.log('qualified_status:', deal.properties.qualified_status || '–ù–ï –ó–ê–ü–û–õ–ù–ï–ù–û');

            console.log('\nüîß –í–°–ï –°–í–û–ô–°–¢–í–ê –°–î–ï–õ–ö–ò:');
            Object.entries(deal.properties).forEach(([key, value]) => {
                if (value !== null && value !== '') {
                    console.log(`${key}: ${value}`);
                }
            });

            return deal;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    async getContactDetails() {
        try {
            console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ç–∞–∫—Ç ID: ${this.contactId}\n`);

            const contact = await this.makeRequest(`${BASE_URL}/crm/v3/objects/contacts/${this.contactId}?properties=vsl_watched,vwo_experiment_id,firstname,lastname,email`);

            console.log('üë§ –†–ï–ó–£–õ–¨–¢–ê–¢ GET –ó–ê–ü–†–û–°–ê –ö–û–ù–¢–ê–ö–¢–ê:');
            console.log('=====================================');
            console.log('ID –∫–æ–Ω—Ç–∞–∫—Ç–∞:', contact.id);
            console.log('–ò–º—è:', contact.properties.firstname, contact.properties.lastname);
            console.log('Email:', contact.properties.email);

            console.log('\nüéØ –ù–û–í–´–ï –ü–û–õ–Ø –ö–û–ù–¢–ê–ö–¢–ê:');
            console.log('vsl_watched:', contact.properties.vsl_watched || '–ù–ï –ó–ê–ü–û–õ–ù–ï–ù–û');
            console.log('vwo_experiment_id:', contact.properties.vwo_experiment_id || '–ù–ï –ó–ê–ü–û–õ–ù–ï–ù–û');

            return contact;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error.message);
            return null;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    async checkCreatedFields() {
        console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –ü–û–õ–ï–ô –í –°–ò–°–¢–ï–ú–ï:\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å–¥–µ–ª–æ–∫
        console.log('üíº –ü–û–õ–Ø –°–î–ï–õ–û–ö:');
        const dealFields = ['trial_status', 'qualified_status'];

        for (const fieldName of dealFields) {
            try {
                const field = await this.makeRequest(`${BASE_URL}/crm/v3/properties/deals/${fieldName}`);
                console.log(`‚úÖ ${fieldName}:`);
                console.log(`   Label: ${field.label}`);
                console.log(`   Type: ${field.type}`);
                console.log(`   Options: ${field.options?.length || 0} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
                if (field.options) {
                    field.options.forEach(option => {
                        console.log(`     - ${option.label} (${option.value})`);
                    });
                }
            } catch (error) {
                console.log(`‚ùå ${fieldName}: –ü–û–õ–ï –ù–ï –ù–ê–ô–î–ï–ù–û`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        console.log('\nüë§ –ü–û–õ–Ø –ö–û–ù–¢–ê–ö–¢–û–í:');
        const contactFields = ['vsl_watched', 'vwo_experiment_id'];

        for (const fieldName of contactFields) {
            try {
                const field = await this.makeRequest(`${BASE_URL}/crm/v3/properties/contacts/${fieldName}`);
                console.log(`‚úÖ ${fieldName}:`);
                console.log(`   Label: ${field.label}`);
                console.log(`   Type: ${field.type}`);
                console.log(`   Options: ${field.options?.length || 0} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
                if (field.options) {
                    field.options.forEach(option => {
                        console.log(`     - ${option.label} (${option.value})`);
                    });
                }
            } catch (error) {
                console.log(`‚ùå ${fieldName}: –ü–û–õ–ï –ù–ï –ù–ê–ô–î–ï–ù–û`);
            }
        }
    }

    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    async updateDealFields() {
        try {
            console.log('\nüîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–ï–ô –°–î–ï–õ–ö–ò:\n');

            const updateData = {
                properties: {
                    trial_status: 'trial_converted',
                    qualified_status: 'highly_qualified'
                }
            };

            const response = await fetch(`${BASE_URL}/crm/v3/objects/deals/${this.dealId}`, {
                method: 'PATCH',
                headers: {
                    'Authorization': `Bearer ${API_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updateData)
            });

            if (response.ok) {
                const updatedDeal = await response.json();
                console.log('‚úÖ –°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                console.log('trial_status:', updatedDeal.properties.trial_status);
                console.log('qualified_status:', updatedDeal.properties.qualified_status);
                return true;
            } else {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', errorText);
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
            return false;
        }
    }

    async runFullCheck() {
        console.log('üß™ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•\n');

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è —Å–æ–∑–¥–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
        await this.checkCreatedFields();

        // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        await this.getDealDetails();

        // 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await this.getContactDetails();

        // 4. –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è
        console.log('\n' + '='.repeat(60));
        await this.updateDealFields();

        // 5. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–¥–µ–ª–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        console.log('\nüîÑ –ü–ï–†–ï–ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:');
        await this.getDealDetails();

        console.log('\nüéØ –ò–¢–û–ì–û–í–´–ï –°–°–´–õ–ö–ò:');
        console.log(`–°–¥–µ–ª–∫–∞: https://app.hubspot.com/contacts/44890341/record/0-3/${this.dealId}`);
        console.log(`–ö–æ–Ω—Ç–∞–∫—Ç: https://app.hubspot.com/contacts/44890341/record/0-1/${this.contactId}`);
    }
}

const checker = new DealFieldChecker();
checker.runFullCheck();