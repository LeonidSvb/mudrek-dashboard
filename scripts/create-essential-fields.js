import dotenv from 'dotenv';
import fetch from 'node-fetch';

dotenv.config();

const API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

class EssentialFieldsCreator {
    constructor() {
        if (!API_KEY) {
            console.error('‚ùå HUBSPOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            process.exit(1);
        }
        console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω:', API_KEY.substring(0, 20) + '...');
    }

    async makeRequest(url, method = 'GET', body = null) {
        const options = {
            method,
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        const response = await fetch(url, options);

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        return await response.json();
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async testConnection() {
        try {
            console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HubSpot API...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É
            const accountInfo = await this.makeRequest(`${BASE_URL}/account-info/v3/details`);
            console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ê–∫–∫–∞—É–Ω—Ç: ${accountInfo.portalId}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
            const contactsTest = await this.makeRequest(`${BASE_URL}/crm/v3/objects/contacts?limit=1`);
            console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º: ${contactsTest.results.length} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–¥–µ–ª–∫–∞–º
            const dealsTest = await this.makeRequest(`${BASE_URL}/crm/v3/objects/deals?limit=1`);
            console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–¥–µ–ª–∫–∞–º: ${dealsTest.results.length} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π
            const contactProperties = await this.makeRequest(`${BASE_URL}/crm/v3/properties/contacts`);
            console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${contactProperties.results.length} –ø–æ–ª–µ–π`);

            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ
    async fieldExists(objectType, fieldName) {
        try {
            await this.makeRequest(`${BASE_URL}/crm/v3/properties/${objectType}/${fieldName}`);
            return true;
        } catch (error) {
            return false;
        }
    }

    // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    async createFieldSafely(objectType, fieldConfig) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ
            const exists = await this.fieldExists(objectType, fieldConfig.name);

            if (exists) {
                console.log(`‚ö†Ô∏è  –ü–æ–ª–µ ${fieldConfig.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ ${objectType}`);
                return { success: true, created: false, field: fieldConfig.name };
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ
            console.log(`üîß –°–æ–∑–¥–∞—é –ø–æ–ª–µ ${fieldConfig.name} –≤ ${objectType}...`);
            const result = await this.makeRequest(
                `${BASE_URL}/crm/v3/properties/${objectType}`,
                'POST',
                fieldConfig
            );

            console.log(`‚úÖ –ü–æ–ª–µ ${fieldConfig.name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ`);
            return { success: true, created: true, field: fieldConfig.name, result };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è ${fieldConfig.name}:`, error.message);
            return { success: false, created: false, field: fieldConfig.name, error: error.message };
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    getEssentialFields() {
        return {
            deals: [
                {
                    name: "trial_status",
                    label: "Trial Status",
                    description: "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ trial rate",
                    groupName: "dealinformation",
                    type: "enumeration",
                    fieldType: "select",
                    options: [
                        { label: "No Trial", value: "no_trial", description: "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–ª—Å—è" },
                        { label: "Trial Given", value: "trial_given", description: "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" },
                        { label: "Trial Converted", value: "trial_converted", description: "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è –∏–∑ –ø—Ä–æ–±–Ω–æ–≥–æ" },
                        { label: "Trial Expired", value: "trial_expired", description: "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫" }
                    ]
                },
                {
                    name: "qualified_status",
                    label: "Qualified Status",
                    description: "–°—Ç–∞—Ç—É—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ qualified rate",
                    groupName: "dealinformation",
                    type: "enumeration",
                    fieldType: "select",
                    options: [
                        { label: "Not Qualified", value: "not_qualified", description: "–ù–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" },
                        { label: "Qualified", value: "qualified", description: "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" },
                        { label: "Highly Qualified", value: "highly_qualified", description: "–í—ã—Å–æ–∫–æ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" },
                        { label: "Disqualified", value: "disqualified", description: "–î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" }
                    ]
                },
                {
                    name: "offer_given_date",
                    label: "Offer Given Date",
                    description: "–î–∞—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ offers given rate",
                    groupName: "dealinformation",
                    type: "datetime",
                    fieldType: "date"
                }
            ],
            contacts: [
                {
                    name: "vsl_watched",
                    label: "VSL Watched",
                    description: "–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ VSL –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    groupName: "contactinformation",
                    type: "enumeration",
                    fieldType: "select",
                    options: [
                        { label: "Not Watched", value: "not_watched", description: "–ù–µ —Å–º–æ—Ç—Ä–µ–ª" },
                        { label: "Started", value: "started", description: "–ù–∞—á–∞–ª —Å–º–æ—Ç—Ä–µ—Ç—å" },
                        { label: "4min Reached", value: "4min", description: "–î–æ—Å–º–æ—Ç—Ä–µ–ª –¥–æ 4 –º–∏–Ω—É—Ç" },
                        { label: "18min Reached", value: "18min", description: "–î–æ—Å–º–æ—Ç—Ä–µ–ª –¥–æ 18 –º–∏–Ω—É—Ç" },
                        { label: "Completed", value: "completed", description: "–î–æ—Å–º–æ—Ç—Ä–µ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é" }
                    ]
                },
                {
                    name: "first_contact_within_30min",
                    label: "First Contact Within 30min",
                    description: "–ë—ã–ª –ª–∏ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞",
                    groupName: "contactinformation",
                    type: "bool",
                    fieldType: "booleancheckbox"
                },
                {
                    name: "vwo_experiment_id",
                    label: "VWO Experiment ID",
                    description: "ID —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ VWO –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    groupName: "contactinformation",
                    type: "string",
                    fieldType: "text"
                }
            ]
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    async createEssentialFields() {
        console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–• –ü–û–õ–ï–ô –î–õ–Ø –ú–ï–¢–†–ò–ö\n');

        const fields = this.getEssentialFields();
        const results = {
            deals: [],
            contacts: [],
            summary: { created: 0, existed: 0, failed: 0 }
        };

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–¥–µ–ª–æ–∫
        console.log('üíº –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Å–¥–µ–ª–æ–∫:');
        for (const fieldConfig of fields.deals) {
            const result = await this.createFieldSafely('deals', fieldConfig);
            results.deals.push(result);

            if (result.success && result.created) results.summary.created++;
            else if (result.success && !result.created) results.summary.existed++;
            else results.summary.failed++;

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        console.log('\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:');
        for (const fieldConfig of fields.contacts) {
            const result = await this.createFieldSafely('contacts', fieldConfig);
            results.contacts.push(result);

            if (result.success && result.created) results.summary.created++;
            else if (result.success && !result.created) results.summary.existed++;
            else results.summary.failed++;

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        return results;
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    async testCreatedFields() {
        console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ù–´–• –ü–û–õ–ï–ô:');

        const fields = this.getEssentialFields();
        const testResults = {
            deals: [],
            contacts: []
        };

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—è —Å–¥–µ–ª–æ–∫
        for (const fieldConfig of fields.deals) {
            try {
                const field = await this.makeRequest(`${BASE_URL}/crm/v3/properties/deals/${fieldConfig.name}`);
                testResults.deals.push({ name: fieldConfig.name, status: 'OK', type: field.type });
                console.log(`‚úÖ deals.${fieldConfig.name}: ${field.type}`);
            } catch (error) {
                testResults.deals.push({ name: fieldConfig.name, status: 'ERROR', error: error.message });
                console.log(`‚ùå deals.${fieldConfig.name}: ${error.message}`);
            }
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        for (const fieldConfig of fields.contacts) {
            try {
                const field = await this.makeRequest(`${BASE_URL}/crm/v3/properties/contacts/${fieldConfig.name}`);
                testResults.contacts.push({ name: fieldConfig.name, status: 'OK', type: field.type });
                console.log(`‚úÖ contacts.${fieldConfig.name}: ${field.type}`);
            } catch (error) {
                testResults.contacts.push({ name: fieldConfig.name, status: 'ERROR', error: error.message });
                console.log(`‚ùå contacts.${fieldConfig.name}: ${error.message}`);
            }
        }

        return testResults;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
    async run() {
        console.log('üöÄ –°–û–ó–î–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–• –ü–û–õ–ï–ô HUBSPOT\n');

        // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const connectionOK = await this.testConnection();
        if (!connectionOK) {
            console.log('\n‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.');
            return;
        }

        console.log('\n' + '='.repeat(60));

        // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è
        const results = await this.createEssentialFields();

        console.log('\n' + '='.repeat(60));
        console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π: ${results.summary.created}`);
        console.log(`‚ö†Ô∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: ${results.summary.existed}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.summary.failed}`);

        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        if (results.summary.created > 0 || results.summary.existed > 0) {
            console.log('\n' + '='.repeat(60));
            await this.testCreatedFields();
        }

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const report = {
            timestamp: new Date().toISOString(),
            connection_test: connectionOK,
            creation_results: results,
            fields_created: this.getEssentialFields()
        };

        const fs = await import('fs');
        fs.writeFileSync('field-creation-report.json', JSON.stringify(report, null, 2));
        console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ field-creation-report.json');

        console.log('\nüéâ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–û!');
        console.log('üìã –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Make –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –ø–æ–ª–µ–π');

        return report;
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    const creator = new EssentialFieldsCreator();
    creator.run().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}