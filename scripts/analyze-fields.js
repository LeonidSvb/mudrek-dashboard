import fs from 'fs';

class FieldAnalyzer {
    constructor() {
        this.dealsData = null;
        this.contactsData = null;
        this.loadData();
    }

    loadData() {
        try {
            this.dealsData = JSON.parse(fs.readFileSync('sample-deals.json', 'utf8'));
            this.contactsData = JSON.parse(fs.readFileSync('sample-contacts.json', 'utf8'));
            console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
            process.exit(1);
        }
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Å–¥–µ–ª–∫–∞—Ö
    analyzeDealsFields() {
        console.log('\n=== –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –°–î–ï–õ–û–ö ===');
        console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–π—Å—Ç–≤: ${this.dealsData.properties_count}`);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏
        if (this.dealsData.deals.length > 0) {
            const firstDeal = this.dealsData.deals[0];
            const properties = firstDeal.properties;

            console.log('\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏:');
            const availableFields = [];

            Object.keys(properties).forEach(key => {
                const value = properties[key];
                if (value !== null && value !== '') {
                    availableFields.push({
                        name: key,
                        value: value,
                        type: typeof value
                    });
                }
            });

            availableFields.sort((a, b) => a.name.localeCompare(b.name));

            console.log(`\n–ù–µ–ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π: ${availableFields.length}`);
            availableFields.forEach(field => {
                console.log(`  ${field.name}: ${field.value} (${field.type})`);
            });
        }

        return this.dealsData.available_properties;
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
    analyzeContactsFields() {
        console.log('\n=== –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –ö–û–ù–¢–ê–ö–¢–û–í ===');
        console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–π—Å—Ç–≤: ${this.contactsData.properties_count}`);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if (this.contactsData.contacts.length > 0) {
            const firstContact = this.contactsData.contacts[0];
            const properties = firstContact.properties;

            console.log('\nüë§ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞:');
            const availableFields = [];

            Object.keys(properties).forEach(key => {
                const value = properties[key];
                if (value !== null && value !== '') {
                    availableFields.push({
                        name: key,
                        value: value,
                        type: typeof value
                    });
                }
            });

            availableFields.sort((a, b) => a.name.localeCompare(b.name));

            console.log(`\n–ù–µ–ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π: ${availableFields.length}`);
            availableFields.forEach(field => {
                console.log(`  ${field.name}: ${field.value} (${field.type})`);
            });
        }

        return this.contactsData.available_properties;
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç—Ä–µ–∫–∏–Ω–≥–æ–º
    findTrackingFields() {
        console.log('\n=== –ü–û–ò–°–ö –ü–û–õ–ï–ô –î–õ–Ø –¢–†–ï–ö–ò–ù–ì–ê ===');

        const allProperties = [
            ...this.dealsData.available_properties,
            ...this.contactsData.available_properties
        ];

        const trackingKeywords = [
            'call', 'phone', 'meeting', 'follow', 'contact',
            'source', 'campaign', 'conversion', 'stage',
            'payment', 'amount', 'price', 'trial',
            'video', 'vsl', 'time', 'date', 'duration',
            'qualified', 'offer', 'close', 'pickup',
            'installment', 'revenue', 'owner'
        ];

        const relevantFields = {};

        trackingKeywords.forEach(keyword => {
            relevantFields[keyword] = allProperties.filter(prop =>
                prop.toLowerCase().includes(keyword)
            );
        });

        Object.keys(relevantFields).forEach(keyword => {
            if (relevantFields[keyword].length > 0) {
                console.log(`\nüîç –ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å "${keyword}":`);
                relevantFields[keyword].forEach(field => {
                    console.log(`  - ${field}`);
                });
            }
        });

        return relevantFields;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π, —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ –∫–æ–¥–µ
    checkCustomFields() {
        console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ö–ê–°–¢–û–ú–ù–´–• –ü–û–õ–ï–ô ===');

        const expectedCustomFields = [
            'payment_method',
            'payment_type',
            'deal_whole_amount',
            'the_left_amount',
            'installment_monthly_amount',
            'number_of_installments__months',
            'date_of_last_installment',
            'number_of_already_paid_installments',
            'number_of_left_installments',
            'payment_status',
            'phone_number'
        ];

        const allFields = [
            ...this.dealsData.available_properties,
            ...this.contactsData.available_properties
        ];

        console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è:');
        const foundFields = [];
        const missingFields = [];

        expectedCustomFields.forEach(field => {
            if (allFields.includes(field)) {
                foundFields.push(field);
                console.log(`  ‚úì ${field}`);
            } else {
                missingFields.push(field);
            }
        });

        if (missingFields.length > 0) {
            console.log('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è:');
            missingFields.forEach(field => {
                console.log(`  ‚úó ${field}`);
            });
        }

        return { foundFields, missingFields };
    }

    // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analyzeAll() {
        console.log('üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô HUBSPOT\n');

        const dealsFields = this.analyzeDealsFields();
        const contactsFields = this.analyzeContactsFields();
        const trackingFields = this.findTrackingFields();
        const customFields = this.checkCustomFields();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        const analysis = {
            summary: {
                deals_properties_count: this.dealsData.properties_count,
                contacts_properties_count: this.contactsData.properties_count,
                deals_sample_count: this.dealsData.total,
                contacts_sample_count: this.contactsData.total
            },
            deals_fields: dealsFields,
            contacts_fields: contactsFields,
            tracking_fields: trackingFields,
            custom_fields: customFields,
            generated_at: new Date().toISOString()
        };

        fs.writeFileSync('fields-analysis.json', JSON.stringify(analysis, null, 2));
        console.log('\nüíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ fields-analysis.json');

        return analysis;
    }
}

const analyzer = new FieldAnalyzer();
analyzer.analyzeAll();