import dotenv from 'dotenv';
import fs from 'fs';
import fetch from 'node-fetch';

dotenv.config();

const API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

class CallsDataCollector {
    constructor() {
        if (!API_KEY) {
            console.error('–û—à–∏–±–∫–∞: HUBSPOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            process.exit(1);
        }
    }

    async makeRequest(url) {
        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status} - ${await response.text()}`);
        }

        return await response.json();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–∞—Ö (engagements —Ç–∏–ø–∞ CALL)
    async getCallEngagements(limit = 100) {
        try {
            console.log('üìû –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö –∏–∑ HubSpot...');

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ engagements —Ç–∏–ø–∞ CALL
            const response = await this.makeRequest(
                `${BASE_URL}/crm/v3/objects/calls?limit=${limit}&properties=hs_call_body,hs_call_callee_object_id,hs_call_callee_object_type,hs_call_direction,hs_call_disposition,hs_call_duration,hs_call_from_number,hs_call_recording_url,hs_call_source,hs_call_status,hs_call_title,hs_call_to_number,hs_timestamp,hubspot_owner_id,hs_activity_type`
            );

            console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: ${response.results.length}`);

            const callsData = {
                total_calls: response.results.length,
                calls: response.results,
                generated_at: new Date().toISOString()
            };

            fs.writeFileSync('calls-data.json', JSON.stringify(callsData, null, 2));
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ calls-data.json');

            return callsData;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∑–≤–æ–Ω–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    async getContactCalls(contactId) {
        try {
            console.log(`üìû –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${contactId}...`);

            const response = await this.makeRequest(
                `${BASE_URL}/crm/v4/objects/contacts/${contactId}/associations/calls`
            );

            console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${response.results.length}`);

            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –∑–≤–æ–Ω–∫–∞
            const callDetails = [];
            for (const association of response.results) {
                try {
                    const callDetail = await this.makeRequest(
                        `${BASE_URL}/crm/v3/objects/calls/${association.toObjectId}?properties=hs_call_body,hs_call_direction,hs_call_disposition,hs_call_duration,hs_call_status,hs_timestamp,hubspot_owner_id`
                    );
                    callDetails.push(callDetail);
                } catch (err) {
                    console.log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ ${association.toObjectId}: ${err.message}`);
                }
            }

            return callDetails;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error.message);
            return [];
        }
    }

    // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö
    analyzeCallsData(callsData) {
        if (!callsData || !callsData.calls) return null;

        const calls = callsData.calls;

        console.log('\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –û –ó–í–û–ù–ö–ê–•:');

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalCalls = calls.length;
        const callsWithDuration = calls.filter(call =>
            call.properties.hs_call_duration &&
            parseInt(call.properties.hs_call_duration) > 0
        );

        const totalDuration = callsWithDuration.reduce((sum, call) =>
            sum + parseInt(call.properties.hs_call_duration || 0), 0
        );

        const avgDuration = totalDuration / callsWithDuration.length;

        console.log(`–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: ${totalCalls}`);
        console.log(`–ó–≤–æ–Ω–∫–æ–≤ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é: ${callsWithDuration.length}`);
        console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round(totalDuration / 1000 / 60)} –º–∏–Ω—É—Ç`);
        console.log(`–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(avgDuration / 1000 / 60)} –º–∏–Ω—É—Ç`);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        const directions = {};
        calls.forEach(call => {
            const direction = call.properties.hs_call_direction || 'unknown';
            directions[direction] = (directions[direction] || 0) + 1;
        });

        console.log('\n–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:');
        Object.entries(directions).forEach(([direction, count]) => {
            console.log(`  ${direction}: ${count}`);
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        const statuses = {};
        calls.forEach(call => {
            const status = call.properties.hs_call_disposition || call.properties.hs_call_status || 'unknown';
            statuses[status] = (statuses[status] || 0) + 1;
        });

        console.log('\n–ü–æ —Å—Ç–∞—Ç—É—Å—É:');
        Object.entries(statuses).forEach(([status, count]) => {
            console.log(`  ${status}: ${count}`);
        });

        // –ó–≤–æ–Ω–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 5+ –º–∏–Ω—É—Ç
        const longCalls = callsWithDuration.filter(call =>
            parseInt(call.properties.hs_call_duration) >= 300000
        );

        const fiveMinRate = (longCalls.length / callsWithDuration.length) * 100;
        console.log(`\n5min-reached-rate: ${fiveMinRate.toFixed(2)}%`);

        // –ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        const byOwner = {};
        calls.forEach(call => {
            const owner = call.properties.hubspot_owner_id || 'unassigned';
            if (!byOwner[owner]) {
                byOwner[owner] = { calls: 0, totalDuration: 0 };
            }
            byOwner[owner].calls++;
            byOwner[owner].totalDuration += parseInt(call.properties.hs_call_duration || 0);
        });

        console.log('\n–ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:');
        Object.entries(byOwner).forEach(([owner, stats]) => {
            console.log(`  ${owner}: ${stats.calls} –∑–≤–æ–Ω–∫–æ–≤, ${Math.round(stats.totalDuration / 1000 / 60)} –º–∏–Ω—É—Ç`);
        });

        return {
            total_calls: totalCalls,
            calls_with_duration: callsWithDuration.length,
            total_duration_minutes: Math.round(totalDuration / 1000 / 60),
            avg_duration_minutes: Math.round(avgDuration / 1000 / 60),
            five_min_rate: fiveMinRate,
            directions,
            statuses,
            by_owner: byOwner
        };
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞
    async collectAndAnalyze() {
        console.log('üîç –°–ë–û–† –î–ê–ù–ù–´–• –û –ó–í–û–ù–ö–ê–• –ò–ó HUBSPOT\n');

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–∞—Ö
        const callsData = await this.getCallEngagements(100);

        if (callsData) {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const analysis = this.analyzeCallsData(callsData);

            if (analysis) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                const report = {
                    summary: analysis,
                    raw_data: callsData,
                    generated_at: new Date().toISOString()
                };

                fs.writeFileSync('calls-analysis-report.json', JSON.stringify(report, null, 2));
                console.log('\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ calls-analysis-report.json');
            }
        }

        // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        try {
            console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ 150479232059...');
            const contactCalls = await this.getContactCalls('150479232059');

            if (contactCalls.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${contactCalls.length} –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞`);

                contactCalls.forEach((call, index) => {
                    const duration = call.properties.hs_call_duration;
                    const direction = call.properties.hs_call_direction;
                    const status = call.properties.hs_call_disposition;
                    const timestamp = call.properties.hs_timestamp;

                    console.log(`  –ó–≤–æ–Ω–æ–∫ ${index + 1}:`);
                    console.log(`    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration ? Math.round(duration / 1000 / 60) : 'N/A'} –º–∏–Ω—É—Ç`);
                    console.log(`    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction || 'N/A'}`);
                    console.log(`    –°—Ç–∞—Ç—É—Å: ${status || 'N/A'}`);
                    console.log(`    –í—Ä–µ–º—è: ${timestamp || 'N/A'}`);
                });

                fs.writeFileSync('contact-calls-150479232059.json', JSON.stringify(contactCalls, null, 2));
                console.log('\nüíæ –ó–≤–æ–Ω–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ contact-calls-150479232059.json');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–≤–æ–Ω–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞');
        }
    }
}

const collector = new CallsDataCollector();
collector.collectAndAnalyze();