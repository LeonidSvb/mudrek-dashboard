require('dotenv/config');
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function checkOwnerId() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ owner_id –≤ contacts\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  const { count: total } = await supabase
    .from('hubspot_contacts_raw')
    .select('*', { count: 'exact', head: true });

  // Owner_id –≤ –∫–æ–ª–æ–Ω–∫–µ (–Ω–µ NULL)
  const { count: inColumn } = await supabase
    .from('hubspot_contacts_raw')
    .select('*', { count: 'exact', head: true })
    .not('hubspot_owner_id', 'is', null);

  // –ü–æ–ª—É—á–∏—Ç—å sample –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ raw_json
  const { data: sample } = await supabase
    .from('hubspot_contacts_raw')
    .select('hubspot_id, hubspot_owner_id, raw_json')
    .limit(1000);

  let inRawJson = 0;
  let canExtract = 0;

  sample.forEach(contact => {
    const ownerInRaw = contact.raw_json?.properties?.hubspot_owner_id;
    if (ownerInRaw !== null && ownerInRaw !== undefined) {
      inRawJson++;

      // –ï—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ NULL, –Ω–æ –≤ raw_json –µ—Å—Ç—å
      if (!contact.hubspot_owner_id) {
        canExtract++;
      }
    }
  });

  // –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º –Ω–∞ –≤–µ—Å—å dataset
  const percentInRaw = (inRawJson / sample.length) * 100;
  const estimatedTotal = Math.round((inRawJson / sample.length) * total);
  const estimatedCanExtract = Math.round((canExtract / sample.length) * total);

  console.log('üìä RESULTS:\n');
  console.log(`–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${total}`);
  console.log('');
  console.log(`Owner_id –≤ –∫–æ–ª–æ–Ω–∫–µ: ${inColumn} (${(inColumn/total*100).toFixed(1)}%)`);
  console.log(`Owner_id –≤ raw_json (estimate): ${estimatedTotal} (${percentInRaw.toFixed(1)}%)`);
  console.log('');

  if (estimatedCanExtract > 0) {
    console.log(`‚ö†Ô∏è  –ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å: ~${estimatedCanExtract} owner_id –∏–∑ raw_json!\n`);
    console.log('SQL –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:');
    console.log('');
    console.log('UPDATE hubspot_contacts_raw');
    console.log("SET hubspot_owner_id = raw_json->'properties'->>'hubspot_owner_id'");
    console.log('WHERE hubspot_owner_id IS NULL');
    console.log("  AND raw_json->'properties'->>'hubspot_owner_id' IS NOT NULL;");
  } else {
    console.log('‚úÖ –í—Å–µ owner_id —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ raw_json.');
  }

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìù –ü–†–ò–ú–ï–†–´ (first 10):\n');

  const { data: examples } = await supabase
    .from('hubspot_contacts_raw')
    .select('hubspot_id, hubspot_owner_id, phone, raw_json')
    .limit(10);

  examples.forEach((c, i) => {
    const ownerColumn = c.hubspot_owner_id || 'NULL';
    const ownerRaw = c.raw_json?.properties?.hubspot_owner_id || 'NULL';

    const match = ownerColumn === ownerRaw ? '‚úÖ' : '‚ùå';

    console.log(`${i + 1}. ID ${c.hubspot_id}`);
    console.log(`   Column: ${ownerColumn}`);
    console.log(`   Raw_json: ${ownerRaw}`);
    console.log(`   Match: ${match}`);
    console.log('');
  });
}

checkOwnerId().catch(console.error);
