require('dotenv').config();

async function checkHubSpotDispositions() {
  const apiKey = process.env.HUBSPOT_API_KEY;

  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º HubSpot Call Disposition —á–µ—Ä–µ–∑ API\n');

  try {
    // 1. –ü–æ–ª—É—á–∏—Ç—å property metadata –¥–ª—è hs_call_disposition
    const propUrl = 'https://api.hubapi.com/properties/v2/calls/properties/named/hs_call_disposition';
    const propResponse = await fetch(propUrl, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    });

    if (!propResponse.ok) {
      throw new Error(`HubSpot API error: ${propResponse.status} ${propResponse.statusText}`);
    }

    const propData = await propResponse.json();

    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ hs_call_disposition:\n');
    console.log('–ù–∞–∑–≤–∞–Ω–∏–µ:', propData.label);
    console.log('–¢–∏–ø:', propData.type);
    console.log('–û–ø–∏—Å–∞–Ω–∏–µ:', propData.description || 'N/A');

    if (propData.options && propData.options.length > 0) {
      console.log('\n‚úÖ –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (options):');
      console.table(propData.options.map(opt => ({
        value: opt.value,
        label: opt.label,
        description: opt.description || 'N/A',
        displayOrder: opt.displayOrder
      })));

      // –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –Ω–∞—à–∏–º–∏ UUID
      console.log('\nüîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å UUID –∏–∑ –Ω–∞—à–µ–π –ë–î:');
      const ourUUIDs = [
        { uuid: '73a0d17f-1163-4015-bdd5-ec830791da20', count: 588, percent: 58.8 },
        { uuid: 'f240bbac-87c9-4f6e-bf70-924b57d47db7', count: 378, percent: 37.8 },
        { uuid: 'b2cf5968-551e-4856-9783-52b3da59a7d0', count: 34, percent: 3.4 }
      ];

      ourUUIDs.forEach(item => {
        const match = propData.options.find(opt => opt.value === item.uuid);
        if (match) {
          console.log(`\n${item.uuid}`);
          console.log(`  ‚Üí Label: "${match.label}"`);
          console.log(`  ‚Üí –í –ë–î: ${item.count} –∑–≤–æ–Ω–∫–æ–≤ (${item.percent}%)`);
        }
      });

      // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ —Å—á–∏—Ç–∞—Ç—å "connected"
      console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –¥–ª—è Pickup Rate:');
      const connectedOptions = propData.options.filter(opt =>
        opt.label.toLowerCase().includes('connect') ||
        opt.label.toLowerCase().includes('answer') ||
        opt.label.toLowerCase().includes('complete')
      );

      if (connectedOptions.length > 0) {
        console.log('–°—á–∏—Ç–∞—Ç—å "connected" (pickup):');
        connectedOptions.forEach(opt => {
          const ourData = ourUUIDs.find(u => u.uuid === opt.value);
          console.log(`  - "${opt.label}" (${opt.value})`);
          if (ourData) {
            console.log(`    –í –ë–î: ${ourData.count} –∑–≤–æ–Ω–∫–æ–≤ (${ourData.percent}%)`);
          }
        });
      }
    } else {
      console.log('\n‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö options –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è —á–µ—Ä–µ–∑ API');
      console.log('–ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...\n');

      // –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫ –∏–∑ HubSpot
      const callsUrl = 'https://api.hubapi.com/crm/v3/objects/calls?limit=1&properties=hs_call_disposition,hs_call_status,hs_call_title,hs_call_duration';
      const callsResponse = await fetch(callsUrl, {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      if (callsResponse.ok) {
        const callsData = await callsResponse.json();
        console.log('üìû –ü—Ä–∏–º–µ—Ä –∑–≤–æ–Ω–∫–∞ –∏–∑ HubSpot:');
        console.log(JSON.stringify(callsData.results[0], null, 2));
      }
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —á–µ—Ä–µ–∑ CRM Pipeline/Stages API
    console.log('\n\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Pipelines API...');
    const pipelinesUrl = 'https://api.hubapi.com/crm/v3/pipelines/calls';
    const pipelinesResponse = await fetch(pipelinesUrl, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    });

    if (pipelinesResponse.ok) {
      const pipelinesData = await pipelinesResponse.json();
      console.log('Pipelines info:');
      console.log(JSON.stringify(pipelinesData, null, 2));
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(error.stack);
  }
}

checkHubSpotDispositions();
