import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function checkCallAssociations() {
  console.log('=== –ê–ù–ê–õ–ò–ó –ó–í–û–ù–ö–û–í –ò –°–î–ï–õ–û–ö ===\n');

  // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–≤–æ–Ω–∫–∏ - –∫ —á–µ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω—ã
  console.log('1. –ó–í–û–ù–ö–ò - –°–≤—è–∑–∏\n');
  const { data: calls } = await supabase
    .from('hubspot_calls_raw')
    .select('hubspot_id, call_to_number, call_from_number, call_timestamp, call_duration, raw_json')
    .limit(5);

  calls?.forEach((call, i) => {
    console.log(`Call ${i + 1}:`);
    console.log(`  Duration: ${call.call_duration ? (call.call_duration / 1000).toFixed(0) : 0}s`);
    console.log(`  To: ${call.call_to_number}`);
    console.log(`  From: ${call.call_from_number}`);

    if (call.raw_json?.associations) {
      console.log(`  Associations:`, Object.keys(call.raw_json.associations));
    } else {
      console.log(`  Associations: –ù–ï–¢`);
    }
    console.log('');
  });

  // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–æ–∫
  console.log('\n2. –°–¢–ê–î–ò–ò –°–î–ï–õ–û–ö (Deal Stages)\n');
  const { data: stages } = await supabase
    .from('hubspot_deals_raw')
    .select('dealstage')
    .not('dealstage', 'is', null);

  const stageCount = {};
  stages?.forEach(d => {
    stageCount[d.dealstage] = (stageCount[d.dealstage] || 0) + 1;
  });

  console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º:');
  Object.entries(stageCount)
    .sort((a, b) => b[1] - a[1])
    .forEach(([stage, count]) => {
      console.log(`  ${stage}: ${count}`);
    });

  // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å payment –ø–æ–ª—è
  console.log('\n\n3. PAYMENT –ü–û–õ–Ø –í –°–î–ï–õ–ö–ê–•\n');
  const { data: dealSample } = await supabase
    .from('hubspot_deals_raw')
    .select('*')
    .not('amount', 'is', null)
    .limit(5);

  console.log('–ü—Ä–∏–º–µ—Ä —Å–¥–µ–ª–∫–∏:');
  if (dealSample && dealSample.length > 0) {
    const deal = dealSample[0];
    console.log(`  Amount: ‚Ç™${deal.amount}`);
    console.log(`  Stage: ${deal.dealstage}`);
    console.log(`  Payment Status: ${deal.payment_status || 'N/A'}`);
    console.log(`  Upfront Payment: ${deal.upfront_payment || 'N/A'}`);
    console.log(`  Installment Plan: ${deal.installment_plan || 'N/A'}`);
    console.log(`  Installments: ${deal.number_of_installments__months || 'N/A'}`);
    console.log(`  Is Refunded: ${deal.is_refunded || false}`);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å raw_json –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (deal.raw_json?.properties) {
      const props = deal.raw_json.properties;
      const paymentFields = Object.keys(props).filter(k =>
        k.includes('payment') ||
        k.includes('upfront') ||
        k.includes('installment') ||
        k.includes('paid') ||
        k.includes('balance')
      );
      console.log('\n  –î–æ–ø. payment –ø–æ–ª—è –≤ raw_json:', paymentFields);
    }
  }

  // 4. –ê–Ω–∞–ª–∏–∑ "–Ω–∞—Å—Ç–æ—è—â–∏—Ö" —Å–¥–µ–ª–æ–∫
  console.log('\n\n4. –ê–ù–ê–õ–ò–ó "–ù–ê–°–¢–û–Ø–©–ò–•" –°–î–ï–õ–û–ö\n');

  // –°–∫–æ–ª—å–∫–æ closedwon
  const { count: closedwonCount } = await supabase
    .from('hubspot_deals_raw')
    .select('*', { count: 'exact', head: true })
    .eq('dealstage', 'closedwon');

  console.log(`Deals —Å–æ stage "closedwon": ${closedwonCount}`);

  // –°–∫–æ–ª—å–∫–æ —Å upfront payment
  const { data: upfrontDeals } = await supabase
    .from('hubspot_deals_raw')
    .select('upfront_payment, amount, payment_status')
    .not('upfront_payment', 'is', null);

  console.log(`Deals —Å upfront_payment: ${upfrontDeals?.length || 0}`);

  if (upfrontDeals && upfrontDeals.length > 0) {
    const sample = upfrontDeals.slice(0, 3);
    console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
    sample.forEach((d, i) => {
      console.log(`  ${i + 1}. Upfront: ‚Ç™${d.upfront_payment} / Total: ‚Ç™${d.amount} (${d.payment_status})`);
    });
  }

  // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\n\n=== –ò–ù–î–£–°–¢–†–ò–ê–õ–¨–ù–´–ï –°–¢–ê–ù–î–ê–†–¢–´ (EdTech / Online Courses) ===\n');
  console.log('–î–ª—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤ —Å —Ä–∞—Å—Å—Ä–æ—á–∫–æ–π –æ–±—ã—á–Ω–æ —Å—á–∏—Ç–∞—é—Ç:');
  console.log('');
  console.log('üìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–î–ê–ñ:');
  console.log('  1. "Booking" / "Commitment" - –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–ª—Å—è (signed deal)');
  console.log('     ‚Üí Stage: appointmentscheduled, contract sent, etc.');
  console.log('     ‚Üí –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è forecast');
  console.log('');
  console.log('  2. "Cash Collected" / "Revenue Recognized" - –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏—à–ª–∏');
  console.log('     ‚Üí Upfront payment (–ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂)');
  console.log('     ‚Üí –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏');
  console.log('');
  console.log('  3. "Closed Won" - –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª —Ö–æ—Ç—è –±—ã –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂');
  console.log('     ‚Üí Stage: closedwon');
  console.log('     ‚Üí payment_status: "paid" –∏–ª–∏ "partial"');
  console.log('');
  console.log('üìû –ú–ï–¢–†–ò–ö–ò –ó–í–û–ù–ö–û–í:');
  console.log('  - Pre-sale calls: –∑–≤–æ–Ω–∫–∏ –î–û —Ç–æ–≥–æ –∫–∞–∫ deal —Å—Ç–∞–ª closedwon');
  console.log('  - Onboarding calls: –∑–≤–æ–Ω–∫–∏ –ü–û–°–õ–ï closedwon (customer success)');
  console.log('  - –°–≤—è–∑—å —á–µ—Ä–µ–∑ call.timestamp vs deal.closedate');
  console.log('');
  console.log('üí∞ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –î–õ–Ø –¢–í–û–ï–ì–û –î–ê–®–ë–û–†–î–ê:');
  console.log('  1. Total Sales = SUM(amount) WHERE dealstage = "closedwon"');
  console.log('     (–ø–æ–ª–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏, –≤–∫–ª—é—á–∞—è –±—É–¥—É—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏)');
  console.log('');
  console.log('  2. Cash Collected = SUM(upfront_payment) WHERE upfront_payment IS NOT NULL');
  console.log('     (—Ä–µ–∞–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏)');
  console.log('');
  console.log('  3. –ï—Å–ª–∏ upfront_payment = NULL, –∏—Å–ø–æ–ª—å–∑—É–π amount (–∑–Ω–∞—á–∏—Ç –ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞)');
  console.log('');
  console.log('  4. –î–ª—è –∑–≤–æ–Ω–∫–æ–≤:');
  console.log('     - "Sales Calls" = calls where contact.lifecyclestage != "customer"');
  console.log('     - "Customer Success Calls" = calls where contact.lifecyclestage = "customer"');
  console.log('');
  console.log('üéØ –ö–õ–Æ–ß–ï–í–û–ô –í–û–ü–†–û–° –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê:');
  console.log('  –ö–∞–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞ –≤–∞–∂–Ω–µ–µ –¥–ª—è –≤–∞—Å?');
  console.log('  A) Total Sales (–ø–æ–ª–Ω–∞—è —Å—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤) - –¥–ª—è forecast');
  console.log('  B) Cash Collected (—Ä–µ–∞–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏) - –¥–ª—è cashflow');
  console.log('');
  console.log('  –û–±—ã—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –û–ë–ï –º–µ—Ç—Ä–∏–∫–∏!');
}

checkCallAssociations().catch(console.error);
