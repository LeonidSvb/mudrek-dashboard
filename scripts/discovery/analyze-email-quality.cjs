require('dotenv/config');
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

// Email validation regex (–ø—Ä–æ—Å—Ç–æ–π)
const EMAIL_REGEX = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

async function analyzeEmailQuality() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ email –¥–∞–Ω–Ω—ã—Ö\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ email (–Ω–µ NULL)
  const { data: contacts } = await supabase
    .from('hubspot_contacts_raw')
    .select('hubspot_id, email, phone, raw_json')
    .not('email', 'is', null)
    .limit(1000);  // Sample 1000 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

  console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º sample: ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n`);

  let validEmails = 0;
  let invalidEmails = 0;
  let probablyNames = 0;

  const examples = {
    validEmails: [],
    invalidEmails: [],
    probablyNames: []
  };

  contacts.forEach(contact => {
    const email = contact.email;

    if (EMAIL_REGEX.test(email)) {
      validEmails++;
      if (examples.validEmails.length < 5) {
        examples.validEmails.push(email);
      }
    } else {
      invalidEmails++;

      // –ü—Ä–æ–≤–µ—Ä–∏–º: —ç—Ç–æ –∏–º—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?
      const hasSpace = email.includes(' ');
      const hasNoAt = !email.includes('@');

      if (hasSpace || hasNoAt) {
        probablyNames++;
        if (examples.probablyNames.length < 5) {
          examples.probablyNames.push(email);
        }
      } else {
        if (examples.invalidEmails.length < 5) {
          examples.invalidEmails.push(email);
        }
      }
    }
  });

  console.log('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n');
  console.log(`–í—Å–µ–≥–æ –≤ sample: ${contacts.length}`);
  console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ emails: ${validEmails} (${(validEmails/contacts.length*100).toFixed(1)}%)`);
  console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ: ${invalidEmails} (${(invalidEmails/contacts.length*100).toFixed(1)}%)`);
  console.log(`   ‚îî‚îÄ –ò–∑ –Ω–∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–º–µ–Ω–∞: ${probablyNames} (${(probablyNames/contacts.length*100).toFixed(1)}%)`);

  console.log('\nüìù –ü–†–ò–ú–ï–†–´:\n');

  console.log('‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ emails (first 5):');
  examples.validEmails.forEach(e => console.log(`  - ${e}`));

  console.log('\n‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ –∏–º–µ–Ω–∞ (first 5):');
  examples.probablyNames.forEach(e => console.log(`  - ${e}`));

  if (examples.invalidEmails.length > 0) {
    console.log('\n‚ö†Ô∏è  –î—Ä—É–≥–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ (first 5):');
    examples.invalidEmails.forEach(e => console.log(`  - ${e}`));
  }

  // –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º –Ω–∞ –≤–µ—Å—å dataset
  const { count: totalWithEmail } = await supabase
    .from('hubspot_contacts_raw')
    .select('*', { count: 'exact', head: true })
    .not('email', 'is', null);

  const estimatedValid = Math.round((validEmails / contacts.length) * totalWithEmail);
  const estimatedInvalid = Math.round((invalidEmails / contacts.length) * totalWithEmail);

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä –û–¶–ï–ù–ö–ê –ù–ê –í–ï–°–¨ DATASET:\n');
  console.log(`–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å email –∫–æ–ª–æ–Ω–∫–æ–π: ${totalWithEmail}`);
  console.log(`–û—Ü–µ–Ω–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö emails: ~${estimatedValid} (${(validEmails/contacts.length*100).toFixed(1)}%)`);
  console.log(`–û—Ü–µ–Ω–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: ~${estimatedInvalid} (${(invalidEmails/contacts.length*100).toFixed(1)}%)`);

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üéØ –ß–¢–û –≠–¢–û –ó–ù–ê–ß–ò–¢:\n');

  if (validEmails / contacts.length > 0.9) {
    console.log('‚úÖ –•–û–†–û–®–û: >90% –¥–∞–Ω–Ω—ã—Ö = –≤–∞–ª–∏–¥–Ω—ã–µ emails');
    console.log('   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –∫–∞–∫ –µ—Å—Ç—å.');
  } else if (validEmails / contacts.length > 0.7) {
    console.log('‚ö†Ô∏è  –°–†–ï–î–ù–ï: 70-90% –≤–∞–ª–∏–¥–Ω—ã–µ');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É—é: –¥–æ–±–∞–≤–∏—Ç—å validation –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.');
  } else {
    console.log('‚ùå –ü–õ–û–•–û: <70% –≤–∞–ª–∏–¥–Ω—ã–µ');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É—é: –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å.');
  }

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');

  const validPercent = validEmails / contacts.length;

  if (validPercent < 0.7) {
    console.log('1. SQL –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö:');
    console.log('   UPDATE hubspot_contacts_raw');
    console.log("   SET email = NULL");
    console.log("   WHERE email !~ '^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$';");
    console.log('');
    console.log('2. –ò–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É:');
    console.log('   ALTER TABLE hubspot_contacts_raw');
    console.log('   RENAME COLUMN email TO email_or_name;');
  } else {
    console.log('Email –∫–æ–ª–æ–Ω–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.');
  }

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
}

analyzeEmailQuality().catch(console.error);
