require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function testMigration011() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Migration 011...\n');

  try {
    // Test 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Materialized View —Å–æ–∑–¥–∞–Ω
    console.log('Test 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ contact_call_stats_mv');
    const { data: mvData, error: mvError } = await supabase
      .from('contact_call_stats_mv')
      .select('contact_id')
      .limit(1);

    if (mvError) {
      console.error('‚ùå Materialized View –ù–ï —Å–æ–∑–¥–∞–Ω:', mvError.message);
      console.error('\n‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –í–°–Æ –º–∏–≥—Ä–∞—Ü–∏—é 011!');
      process.exit(1);
    }

    console.log('‚úÖ Materialized View —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    // Test 2: –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
    const { count: mvCount, error: countErr } = await supabase
      .from('contact_call_stats_mv')
      .select('*', { count: 'exact', head: true });

    if (countErr) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞:', countErr.message);
    } else {
      console.log(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ MV: ${mvCount}`);
    }

    // Test 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ (–∫–æ—Å–≤–µ–Ω–Ω–æ - —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫)
    const startIndex = Date.now();
    const { data: indexTest } = await supabase
      .from('contact_call_stats_mv')
      .select('*')
      .limit(10);
    const indexTime = Date.now() - startIndex;

    if (indexTime < 500) {
      console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç (${indexTime}ms)`);
    } else {
      console.log(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–æ (${indexTime}ms) - –≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã`);
    }

    // Test 4: –ì–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç - get_all_metrics() –±–µ–∑ timeout
    console.log('\nTest 4: get_all_metrics() (–≥–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç!)');
    console.log('–û–∂–∏–¥–∞–µ–º < 5 —Å–µ–∫—É–Ω–¥...');

    const startTime = Date.now();
    const { data: metrics, error: metricsErr } = await supabase.rpc('get_all_metrics');
    const duration = Date.now() - startTime;

    if (metricsErr) {
      console.error('‚ùå –û–®–ò–ë–ö–ê:', metricsErr.message);
      console.error('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('1. –§—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ STEP 6 –≤ migration 011 –≤—ã–ø–æ–ª–Ω–µ–Ω)');
      console.error('2. Materialized View –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω (–∑–∞–ø—É—Å—Ç–∏—Ç–µ REFRESH MATERIALIZED VIEW)');
      process.exit(1);
    }

    console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! (${duration}ms)`);

    if (duration > 5000) {
      console.log('‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–µ–µ 5 —Å–µ–∫ - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VIEW –≤–º–µ—Å—Ç–æ MV');
    } else {
      console.log('üöÄ –û–¢–õ–ò–ß–ù–û! –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ!');
    }

    // Test 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nTest 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫');
    console.log('  totalContacts:', metrics.totalContacts);
    console.log('  totalSales: ‚Ç™' + metrics.totalSales?.toLocaleString());
    console.log('  followupRate:', metrics.followupRate + '%');
    console.log('  avgFollowups:', metrics.avgFollowups);
    console.log('  timeToFirstContact:', metrics.timeToFirstContact, '–¥–Ω–µ–π');

    if (metrics.followupRate > 0) {
      console.log('‚úÖ Followup –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MV)');
    } else {
      console.log('‚ö†Ô∏è  Followup –º–µ—Ç—Ä–∏–∫–∏ = 0 (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ contact_call_stats_mv)');
    }

    // Test 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ pg_cron job
    console.log('\nTest 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ pg_cron job');
    const { data: cronJobs, error: cronErr } = await supabase
      .from('cron.job')
      .select('*')
      .eq('jobname', 'refresh-contact-stats');

    if (cronErr) {
      console.log('‚ö†Ô∏è  –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å cron jobs (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)');
      console.log('   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Supabase. Job –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω.');
    } else if (cronJobs && cronJobs.length > 0) {
      console.log('‚úÖ Cron job "refresh-contact-stats" —Å–æ–∑–¥–∞–Ω');
      console.log('   –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:', cronJobs[0].schedule);
    } else {
      console.log('‚ùå Cron job –ù–ï –Ω–∞–π–¥–µ–Ω');
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ STEP 5 –≤ migration 011 –≤—ã–ø–æ–ª–Ω–µ–Ω');
    }

    console.log('\nüéâ Migration 011 —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
    console.log('‚úÖ Materialized View —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ get_all_metrics() —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ (<5 —Å–µ–∫)');
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');

    console.log('\nüìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:');
    console.log(`   –î–æ –º–∏–≥—Ä–∞—Ü–∏–∏: >60 —Å–µ–∫ (timeout)`);
    console.log(`   –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${duration}ms`);
    console.log(`   –£–ª—É—á—à–µ–Ω–∏–µ: ${Math.round(60000 / duration)}x –±—ã—Å—Ç—Ä–µ–µ!`);

  } catch (err) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err.message);
    process.exit(1);
  }
}

testMigration011();
