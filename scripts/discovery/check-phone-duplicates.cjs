require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function checkDuplicates() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...\n');

  // SQL –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const { data, error } = await supabase.rpc('exec_sql', {
    query: `
      SELECT
        REGEXP_REPLACE(phone, '[^0-9]', '', 'g') as normalized_phone,
        COUNT(*) as contact_count,
        array_agg(hubspot_id) as contact_ids
      FROM hubspot_contacts_raw
      WHERE phone IS NOT NULL
      GROUP BY normalized_phone
      HAVING COUNT(*) > 1
      ORDER BY COUNT(*) DESC
      LIMIT 10;
    `
  });

  if (error) {
    console.error('–ù–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ RPC, –ø—Ä–æ–±—É—é –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å...');

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ JS
    const { data: phones } = await supabase
      .from('hubspot_contacts_raw')
      .select('hubspot_id, phone')
      .not('phone', 'is', null)
      .limit(10000);

    if (phones) {
      const phoneMap = new Map();

      phones.forEach(contact => {
        const normalized = contact.phone.replace(/[^0-9]/g, '');
        if (!phoneMap.has(normalized)) {
          phoneMap.set(normalized, []);
        }
        phoneMap.get(normalized).push(contact.hubspot_id);
      });

      const duplicates = Array.from(phoneMap.entries())
        .filter(([phone, ids]) => ids.length > 1)
        .sort((a, b) => b[1].length - a[1].length)
        .slice(0, 10);

      console.log('üìä –¢–û–ü-10 –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n');
      duplicates.forEach(([phone, ids], i) => {
        console.log(`${i + 1}. Phone: ${phone}`);
        console.log(`   –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${ids.length}`);
        console.log(`   IDs: ${ids.slice(0, 3).join(', ')}${ids.length > 3 ? '...' : ''}\n`);
      });

      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log('–ò–¢–û–ì–û:');
      console.log(`- –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: ${phoneMap.size}`);
      console.log(`- –¢–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: ${duplicates.length}`);
      console.log(`- –ú–∞–∫—Å–∏–º—É–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ 1 –Ω–æ–º–µ—Ä: ${duplicates[0] ? duplicates[0][1].length : 0}`);
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

      if (duplicates.length > 0) {
        console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!');
        console.log('–î—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å–æ–∑–¥–∞—é—Ç –∫–∞—Ä—Ç–µ–∑–∏–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ JOIN!');
        console.log('\n–†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DISTINCT ON –≤ VIEW –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã.');
      }
    }
  } else {
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', data);
  }
}

checkDuplicates();
