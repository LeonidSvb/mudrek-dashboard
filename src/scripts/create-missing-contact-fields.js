import dotenv from 'dotenv';
import fetch from 'node-fetch';
import fs from 'fs';

dotenv.config();

const API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

class MissingContactFieldsCreator {
    constructor() {
        console.log('–¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω:', API_KEY ? '‚úÖ' : '‚ùå');
    }

    async makeRequest(url, method = 'GET', body = null) {
        const options = {
            method,
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        const response = await fetch(url, options);

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        return await response.json();
    }

    async checkFieldExists(fieldName) {
        try {
            await this.makeRequest(`${BASE_URL}/crm/v3/properties/contacts/${fieldName}`);
            return true;
        } catch (error) {
            if (error.message.includes('404')) {
                return false;
            }
            throw error;
        }
    }

    async createContactField(fieldDefinition) {
        const { name } = fieldDefinition;

        try {
            console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è ${name}...`);
            const exists = await this.checkFieldExists(name);

            if (exists) {
                console.log(`‚ö†Ô∏è –ü–æ–ª–µ ${name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                return { field: name, success: true, existed: true };
            }

            console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è ${name}...`);
            const result = await this.makeRequest(
                `${BASE_URL}/crm/v3/properties/contacts`,
                'POST',
                fieldDefinition
            );

            console.log(`‚úÖ –ü–æ–ª–µ ${name} —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
            return { field: name, success: true, existed: false, result };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è ${name}:`, error.message);
            return { field: name, success: false, error: error.message };
        }
    }

    async createAllMissingFields() {
        console.log('üîß –°–û–ó–î–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ü–û–õ–ï–ô –ö–û–ù–¢–ê–ö–¢–û–í –ò–ó PRD\n');

        const fieldsToCreate = [
            {
                name: "first_contact_within_30min",
                label: "First Contact Within 30min",
                description: "–ë—ã–ª –ª–∏ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞",
                groupName: "contactinformation",
                type: "bool",
                fieldType: "booleancheckbox"
            },
            {
                name: "sales_script_version",
                label: "Sales Script Version",
                description: "–í–µ—Ä—Å–∏—è –ø—Ä–æ–¥–∞—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                groupName: "contactinformation",
                type: "enumeration",
                fieldType: "select",
                options: [
                    { label: "Script v1.0", value: "v1_0" },
                    { label: "Script v1.1", value: "v1_1" },
                    { label: "Script v2.0", value: "v2_0" },
                    { label: "Script v2.1", value: "v2_1" },
                    { label: "Custom Script", value: "custom" }
                ]
            },
            {
                name: "vwo_variation",
                label: "VWO Variation",
                description: "–í–∞—Ä–∏–∞—Ü–∏—è VWO —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (A/B/C)",
                groupName: "contactinformation",
                type: "string",
                fieldType: "text"
            }
        ];

        const results = [];

        for (const fieldDef of fieldsToCreate) {
            const result = await this.createContactField(fieldDef);
            results.push(result);

            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        console.log('\n' + '='.repeat(50));
        console.log('üìã –ò–¢–û–ì–ò –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–ï–ô:');
        console.log('='.repeat(50));

        let created = 0, existed = 0, failed = 0;

        results.forEach(result => {
            if (result.success) {
                if (result.existed) {
                    console.log(`‚ö†Ô∏è ${result.field} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    existed++;
                } else {
                    console.log(`‚úÖ ${result.field} - —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
                    created++;
                }
            } else {
                console.log(`‚ùå ${result.field} - –æ—à–∏–±–∫–∞: ${result.error}`);
                failed++;
            }
        });

        console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
        console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${created}`);
        console.log(`   –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: ${existed}`);
        console.log(`   –û—à–∏–±–æ–∫: ${failed}`);

        const report = {
            timestamp: new Date().toISOString(),
            fields_created: results.filter(r => r.success && !r.existed),
            fields_existed: results.filter(r => r.success && r.existed),
            fields_failed: results.filter(r => !r.success),
            summary: { created, existed, failed }
        };

        fs.writeFileSync('missing-contact-fields-report.json', JSON.stringify(report, null, 2));
        console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ missing-contact-fields-report.json`);

        console.log(`\nüéØ –¢–ï–ü–ï–†–¨ –£ –ù–ê–° –ü–û–õ–ù–û–ï –ü–û–ö–†–´–¢–ò–ï PRD:`);
        console.log(`‚úÖ first_contact_within_30min - –¥–ª—è Time to contact impact`);
        console.log(`‚úÖ sales_script_version - –¥–ª—è Different sales scripts testing`);
        console.log(`‚úÖ vwo_variation - –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ vwo_experiment_id`);
        console.log(`\nüöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–∞—à–±–æ—Ä–¥—É: 100%`);

        return report;
    }
}

const creator = new MissingContactFieldsCreator();
creator.createAllMissingFields();