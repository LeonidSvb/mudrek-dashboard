import dotenv from 'dotenv';
import fetch from 'node-fetch';
import fs from 'fs';

dotenv.config();

const API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

class TestDealCreator {
    constructor() {
        console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω:', API_KEY ? '‚úÖ' : '‚ùå');
    }

    async makeRequest(url, method = 'GET', body = null) {
        const options = {
            method,
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        const response = await fetch(url, options);

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        return await response.json();
    }

    // –ü–æ–ª—É—á–∏—Ç—å Portal ID –¥–ª—è —Å—Å—ã–ª–∫–∏
    async getPortalId() {
        try {
            const accountInfo = await this.makeRequest(`${BASE_URL}/account-info/v3/details`);
            return accountInfo.portalId;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Portal ID:', error.message);
            return null;
        }
    }

    // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    async createTestContact() {
        const contactData = {
            properties: {
                firstname: "–¢–µ—Å—Ç",
                lastname: "–ö–ª–∏–µ–Ω—Ç –î–∞—à–±–æ—Ä–¥–∞",
                email: "test.dashboard.client@example.com",
                phone: "+972501234567",
                company: "Test Dashboard Company",

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                vsl_watched: "18min",
                vwo_experiment_id: "EXP_001_VSL_TEST_2025",

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                lifecyclestage: "lead",
                hs_lead_status: "NEW",
                source: "vsl-landing-page|dashboard-test|make-automation"
            }
        };

        try {
            console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞...');
            const contact = await this.makeRequest(`${BASE_URL}/crm/v3/objects/contacts`, 'POST', contactData);
            console.log(`‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${contact.id}`);
            return contact;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error.message);
            return null;
        }
    }

    // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É
    async createTestDeal(contactId = null) {
        const dealData = {
            properties: {
                dealname: "üß™ –¢–ï–°–¢: Dashboard Metrics Deal - " + new Date().toLocaleDateString(),
                amount: "4500",
                dealstage: "qualifiedtobuy",
                pipeline: "default",

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                trial_status: "trial_converted",
                qualified_status: "highly_qualified",

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
                deal_whole_amount: "4500",
                installments: "3",
                payment_method: "installments",
                closedate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é

                // –ü–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                hs_analytics_latest_source: "DIRECT_TRAFFIC",
                hubspot_owner_assigneddate: new Date().toISOString()
            }
        };

        try {
            console.log('üíº –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏...');
            const deal = await this.makeRequest(`${BASE_URL}/crm/v3/objects/deals`, 'POST', dealData);
            console.log(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${deal.id}`);

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç - —Å–≤—è–∑—ã–≤–∞–µ–º –∏—Ö
            if (contactId) {
                await this.associateContactToDeal(contactId, deal.id);
            }

            return deal;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error.message);
            return null;
        }
    }

    // –°–≤—è–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ —Å–¥–µ–ª–∫–æ–π
    async associateContactToDeal(contactId, dealId) {
        try {
            console.log('üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ —Å–¥–µ–ª–∫–æ–π...');

            const associationData = {
                inputs: [{
                    from: { id: dealId },
                    to: { id: contactId },
                    type: "deal_to_contact"
                }]
            };

            await this.makeRequest(
                `${BASE_URL}/crm/v4/associations/deals/contacts/batch/create`,
                'POST',
                associationData
            );

            console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–≤—è–∑–∞–Ω —Å–æ —Å–¥–µ–ª–∫–æ–π');
        } catch (error) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', error.message);
        }
    }

    // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–≤–æ–Ω–æ–∫)
    async createTestCall(contactId, dealId) {
        try {
            console.log('üìû –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞...');

            // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –≤–º–µ—Å—Ç–æ –∑–≤–æ–Ω–∫–∞ (–ø—Ä–æ—â–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            const noteData = {
                properties: {
                    hs_note_body: "üß™ –¢–ï–°–¢: –ó–≤–æ–Ω–æ–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 12 –º–∏–Ω—É—Ç. –ö–ª–∏–µ–Ω—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–∞–Ω–æ, –≤—ã—Å–æ–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. VSL –¥–æ—Å–º–æ—Ç—Ä–µ–ª –¥–æ 18 –º–∏–Ω—É—Ç. –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ A/B —Ç–µ—Å—Ç–µ EXP_001.",
                    hs_timestamp: new Date().toISOString(),
                    hubspot_owner_id: "682432124" // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
                }
            };

            const note = await this.makeRequest(`${BASE_URL}/crm/v3/objects/notes`, 'POST', noteData);

            // –°–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            if (contactId) {
                const contactAssoc = {
                    inputs: [{
                        from: { id: note.id },
                        to: { id: contactId },
                        type: "note_to_contact"
                    }]
                };
                await this.makeRequest(`${BASE_URL}/crm/v4/associations/notes/contacts/batch/create`, 'POST', contactAssoc);
            }

            // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ —Å–¥–µ–ª–∫–æ–π
            if (dealId) {
                const dealAssoc = {
                    inputs: [{
                        from: { id: note.id },
                        to: { id: dealId },
                        type: "note_to_deal"
                    }]
                };
                await this.makeRequest(`${BASE_URL}/crm/v4/associations/notes/deals/batch/create`, 'POST', dealAssoc);
            }

            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
            return note;

        } catch (error) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error.message);
            return null;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
    async createFullTestData() {
        console.log('üß™ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–û–í–û–ì–û –ù–ê–ë–û–†–ê –î–ê–ù–ù–´–•\n');

        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º Portal ID
            const portalId = await this.getPortalId();
            if (!portalId) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Portal ID');
            }
            console.log(`üè¢ Portal ID: ${portalId}`);

            // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            const contact = await this.createTestContact();
            if (!contact) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç');
            }

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await new Promise(resolve => setTimeout(resolve, 2000));

            // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É
            const deal = await this.createTestDeal(contact.id);
            if (!deal) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É');
            }

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await new Promise(resolve => setTimeout(resolve, 2000));

            // 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await this.createTestCall(contact.id, deal.id);

            // 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
            const contactUrl = `https://app.hubspot.com/contacts/${portalId}/record/0-1/${contact.id}`;
            const dealUrl = `https://app.hubspot.com/contacts/${portalId}/record/0-3/${deal.id}`;

            // 6. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            const report = {
                success: true,
                timestamp: new Date().toISOString(),
                portal_id: portalId,
                created_objects: {
                    contact: {
                        id: contact.id,
                        url: contactUrl,
                        fields_filled: {
                            vsl_watched: "18min",
                            vwo_experiment_id: "EXP_001_VSL_TEST_2025"
                        }
                    },
                    deal: {
                        id: deal.id,
                        url: dealUrl,
                        fields_filled: {
                            trial_status: "trial_converted",
                            qualified_status: "highly_qualified"
                        }
                    }
                },
                test_data_summary: {
                    scenario: "–í—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏–¥ –∏–∑ VSL –∫–∞–º–ø–∞–Ω–∏–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è –∏–∑ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ A/B —Ç–µ—Å—Ç–µ",
                    expected_metrics: {
                        trial_rate: "100% (1/1 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)",
                        qualified_rate: "100% (highly_qualified)",
                        vsl_effectiveness: "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è (18min –ø—Ä–æ—Å–º–æ—Ç—Ä)",
                        vwo_impact: "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è (EXP_001)"
                    }
                }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            fs.writeFileSync('test-data-report.json', JSON.stringify(report, null, 2));

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.log('\n' + '='.repeat(70));
            console.log('üéâ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!');
            console.log('='.repeat(70));

            console.log('\nüìã –°–û–ó–î–ê–ù–ù–´–ï –û–ë–™–ï–ö–¢–´:');
            console.log(`üë§ –ö–æ–Ω—Ç–∞–∫—Ç: ${contact.properties.firstname} ${contact.properties.lastname}`);
            console.log(`   üìß Email: ${contact.properties.email}`);
            console.log(`   üìû Phone: ${contact.properties.phone}`);
            console.log(`   üé¨ VSL Watched: ${contact.properties.vsl_watched}`);
            console.log(`   üß™ VWO Experiment: ${contact.properties.vwo_experiment_id}`);

            console.log(`\nüíº –°–¥–µ–ª–∫–∞: ${deal.properties.dealname}`);
            console.log(`   üí∞ –°—É–º–º–∞: ${deal.properties.amount} ILS`);
            console.log(`   üìä –≠—Ç–∞–ø: ${deal.properties.dealstage}`);
            console.log(`   üéØ Trial Status: ${deal.properties.trial_status}`);
            console.log(`   ‚úÖ Qualified Status: ${deal.properties.qualified_status}`);

            console.log('\nüîó –°–°–´–õ–ö–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:');
            console.log(`üë§ –ö–æ–Ω—Ç–∞–∫—Ç: ${contactUrl}`);
            console.log(`üíº –°–¥–µ–ª–∫–∞: ${dealUrl}`);

            console.log('\nüìä –ß–¢–û –ü–†–û–í–ï–†–ò–¢–¨ –í HUBSPOT:');
            console.log('‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏');
            console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫–∞ —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π');
            console.log('‚úÖ –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–∞–º–µ—Ç–∫–∞ –æ –∑–≤–æ–Ω–∫–µ)');
            console.log('‚úÖ –ü–æ–ª—è –≤–∏–¥–Ω—ã –≤ Properties —Ä–∞–∑–¥–µ–ª–µ');

            console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test-data-report.json');

            return report;

        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            return { success: false, error: error.message };
        }
    }
}

// –ó–∞–ø—É—Å–∫
const creator = new TestDealCreator();
creator.createFullTestData();