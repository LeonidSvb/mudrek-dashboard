import dotenv from 'dotenv';
import fetch from 'node-fetch';
import fs from 'fs';

dotenv.config();

const HUBSPOT_API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

// –£—Å–∏–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π
async function makeHubSpotRequestWithRetry(endpoint, options = {}, maxRetries = 3, delay = 1000) {
    const url = `${BASE_URL}${endpoint}`;

    const defaultOptions = {
        headers: {
            'Authorization': `Bearer ${HUBSPOT_API_KEY}`,
            'Content-Type': 'application/json'
        },
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    };

    const requestOptions = { ...defaultOptions, ...options };

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`[–ü–æ–ø—ã—Ç–∫–∞ ${attempt}] –ó–∞–ø—Ä–æ—Å –∫: ${url}`);

            const response = await fetch(url, requestOptions);

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP Error: ${response.status} - ${response.statusText}. Response: ${errorText}`);
            }

            return await response.json();

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error.message);

            if (attempt === maxRetries) {
                throw error;
            }

            // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            const retryDelay = delay * Math.pow(2, attempt - 1);
            console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${retryDelay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
            await new Promise(resolve => setTimeout(resolve, retryDelay));
        }
    }
}

// –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
class HubSpotBulkLoader {
    constructor() {
        this.progressFile = 'loading-progress.json';
        this.contactsFile = 'all-contacts.json';
        this.dealsFile = 'all-deals.json';
        this.batchSize = 100;
        this.delayBetweenRequests = 500; // 500ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞
    loadProgress() {
        try {
            if (fs.existsSync(this.progressFile)) {
                const data = fs.readFileSync(this.progressFile, 'utf8');
                return JSON.parse(data);
            }
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞');
        }

        return {
            contacts: { loaded: 0, after: null, completed: false },
            deals: { loaded: 0, after: null, completed: false },
            startTime: Date.now()
        };
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∞–π–ª
    saveProgress(progress) {
        fs.writeFileSync(this.progressFile, JSON.stringify(progress, null, 2));
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    async loadAllContacts() {
        const progress = this.loadProgress();
        let allContacts = [];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if (fs.existsSync(this.contactsFile)) {
            try {
                const savedData = JSON.parse(fs.readFileSync(this.contactsFile, 'utf8'));
                allContacts = savedData;
                console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${allContacts.length} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`);
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã');
            }
        }

        if (progress.contacts.completed) {
            console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return allContacts;
        }

        console.log(`üöÄ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ç–∞–∫—Ç—ã... –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${progress.contacts.loaded}`);

        let after = progress.contacts.after;
        let hasMore = true;

        while (hasMore) {
            try {
                let endpoint = `/crm/v3/objects/contacts?limit=${this.batchSize}`;
                if (after) {
                    endpoint += `&after=${after}`;
                }

                const response = await makeHubSpotRequestWithRetry(endpoint);

                if (response.results && response.results.length > 0) {
                    allContacts = allContacts.concat(response.results);
                    progress.contacts.loaded = allContacts.length;

                    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${allContacts.length}`);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
                    if (allContacts.length % 1000 === 0) {
                        fs.writeFileSync(this.contactsFile, JSON.stringify(allContacts, null, 2));
                        console.log(`üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${allContacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`);
                    }
                }

                if (response.paging && response.paging.next) {
                    after = response.paging.next.after;
                    progress.contacts.after = after;
                    this.saveProgress(progress);
                } else {
                    hasMore = false;
                    progress.contacts.completed = true;
                    progress.contacts.after = null;
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, this.delayBetweenRequests));

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error.message);
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π...');
                this.saveProgress(progress);
                fs.writeFileSync(this.contactsFile, JSON.stringify(allContacts, null, 2));
                throw error;
            }
        }

        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        fs.writeFileSync(this.contactsFile, JSON.stringify(allContacts, null, 2));
        this.saveProgress(progress);

        console.log(`‚úÖ –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${allContacts.length}`);
        return allContacts;
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    async loadAllDeals() {
        const progress = this.loadProgress();
        let allDeals = [];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (fs.existsSync(this.dealsFile)) {
            try {
                const savedData = JSON.parse(fs.readFileSync(this.dealsFile, 'utf8'));
                allDeals = savedData;
                console.log(`üíº –ù–∞–π–¥–µ–Ω–æ ${allDeals.length} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫`);
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏');
            }
        }

        if (progress.deals.completed) {
            console.log('‚úÖ –°–¥–µ–ª–∫–∏ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return allDeals;
        }

        console.log(`üöÄ –ó–∞–≥—Ä—É–∂–∞—é —Å–¥–µ–ª–∫–∏... –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${progress.deals.loaded}`);

        let after = progress.deals.after;
        let hasMore = true;

        while (hasMore) {
            try {
                let endpoint = `/crm/v3/objects/deals?limit=${this.batchSize}`;
                if (after) {
                    endpoint += `&after=${after}`;
                }

                const response = await makeHubSpotRequestWithRetry(endpoint);

                if (response.results && response.results.length > 0) {
                    allDeals = allDeals.concat(response.results);
                    progress.deals.loaded = allDeals.length;

                    console.log(`üí∞ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ${allDeals.length}`);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 500 –∑–∞–ø–∏—Å–µ–π
                    if (allDeals.length % 500 === 0) {
                        fs.writeFileSync(this.dealsFile, JSON.stringify(allDeals, null, 2));
                        console.log(`üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${allDeals.length} —Å–¥–µ–ª–æ–∫`);
                    }
                }

                if (response.paging && response.paging.next) {
                    after = response.paging.next.after;
                    progress.deals.after = after;
                    this.saveProgress(progress);
                } else {
                    hasMore = false;
                    progress.deals.completed = true;
                    progress.deals.after = null;
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, this.delayBetweenRequests));

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫:', error.message);
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π...');
                this.saveProgress(progress);
                fs.writeFileSync(this.dealsFile, JSON.stringify(allDeals, null, 2));
                throw error;
            }
        }

        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        fs.writeFileSync(this.dealsFile, JSON.stringify(allDeals, null, 2));
        this.saveProgress(progress);

        console.log(`‚úÖ –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${allDeals.length}`);
        return allDeals;
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    async loadAllData() {
        console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò CRM –î–ê–ù–ù–´–• üöÄ\n');
        const startTime = Date.now();

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            console.log('üìä –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...');

            const [contacts, deals] = await Promise.all([
                this.loadAllContacts(),
                this.loadAllDeals()
            ]);

            const endTime = Date.now();
            const duration = Math.round((endTime - startTime) / 1000);

            console.log('\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! üéâ');
            console.log(`üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${contacts.length}`);
            console.log(`üíº –°–¥–µ–ª–∫–∏: ${deals.length}`);
            console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${duration} —Å–µ–∫—É–Ω–¥`);

            // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            const summary = {
                loadedAt: new Date().toISOString(),
                duration: duration,
                contactsCount: contacts.length,
                dealsCount: deals.length,
                files: {
                    contacts: this.contactsFile,
                    deals: this.dealsFile
                }
            };

            fs.writeFileSync('data-summary.json', JSON.stringify(summary, null, 2));

            return { contacts, deals, summary };

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', error.message);
            console.log('\nüîÑ –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç - –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞ –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è');
            throw error;
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    showStatus() {
        const progress = this.loadProgress();

        console.log('\nüìä –°–¢–ê–¢–£–° –ó–ê–ì–†–£–ó–ö–ò:');
        console.log(`üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${progress.contacts.loaded} (${progress.contacts.completed ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ üîÑ'})`);
        console.log(`üíº –°–¥–µ–ª–∫–∏: ${progress.deals.loaded} (${progress.deals.completed ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ üîÑ'})`);

        if (progress.startTime) {
            const elapsed = Math.round((Date.now() - progress.startTime) / 1000);
            console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${elapsed} —Å–µ–∫—É–Ω–¥`);
        }
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    reset() {
        if (fs.existsSync(this.progressFile)) fs.unlinkSync(this.progressFile);
        if (fs.existsSync(this.contactsFile)) fs.unlinkSync(this.contactsFile);
        if (fs.existsSync(this.dealsFile)) fs.unlinkSync(this.dealsFile);
        console.log('üßπ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—á–∏—â–µ–Ω, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ');
    }
}

export { HubSpotBulkLoader };

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é - –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
if (import.meta.url === `file://${process.argv[1]}`) {
    const loader = new HubSpotBulkLoader();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);

    if (args.includes('--reset')) {
        loader.reset();
    } else if (args.includes('--status')) {
        loader.showStatus();
    } else {
        loader.loadAllData().catch(console.error);
    }
}