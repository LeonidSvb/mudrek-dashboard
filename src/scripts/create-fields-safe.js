import dotenv from 'dotenv';
import fetch from 'node-fetch';
import fs from 'fs';

dotenv.config();

const API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

class SafeFieldCreator {
    constructor() {
        console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω:', API_KEY ? '‚úÖ' : '‚ùå');
    }

    async makeRequest(url, method = 'GET', body = null) {
        const options = {
            method,
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        const response = await fetch(url, options);

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        return await response.json();
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ
    async fieldExists(objectType, fieldName) {
        try {
            await this.makeRequest(`${BASE_URL}/crm/v3/properties/${objectType}/${fieldName}`);
            return true;
        } catch (error) {
            return false;
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è
    async createField(objectType, fieldConfig) {
        try {
            console.log(`\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è: ${objectType}.${fieldConfig.name}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            const exists = await this.fieldExists(objectType, fieldConfig.name);
            if (exists) {
                console.log(`   ‚ö†Ô∏è –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return { success: true, existed: true };
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ
            const result = await this.makeRequest(
                `${BASE_URL}/crm/v3/properties/${objectType}`,
                'POST',
                fieldConfig
            );

            console.log(`   ‚úÖ –ü–æ–ª–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
            return { success: true, existed: false, result };

        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            return { success: false, error: error.message };
        }
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
    getEssentialFields() {
        return {
            // –ü–æ–ª—è –¥–ª—è —Å–¥–µ–ª–æ–∫
            deals: [
                {
                    name: "trial_status",
                    label: "Trial Status",
                    description: "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ Trial Rate",
                    groupName: "dealinformation",
                    type: "enumeration",
                    fieldType: "select",
                    options: [
                        { label: "No Trial", value: "no_trial" },
                        { label: "Trial Given", value: "trial_given" },
                        { label: "Trial Converted", value: "trial_converted" },
                        { label: "Trial Expired", value: "trial_expired" }
                    ]
                },
                {
                    name: "qualified_status",
                    label: "Qualified Status",
                    description: "–°—Ç–∞—Ç—É—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ Qualified Rate",
                    groupName: "dealinformation",
                    type: "enumeration",
                    fieldType: "select",
                    options: [
                        { label: "Not Qualified", value: "not_qualified" },
                        { label: "Qualified", value: "qualified" },
                        { label: "Highly Qualified", value: "highly_qualified" }
                    ]
                }
            ],
            // –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            contacts: [
                {
                    name: "vsl_watched",
                    label: "VSL Watched",
                    description: "–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ VSL –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    groupName: "contactinformation",
                    type: "enumeration",
                    fieldType: "select",
                    options: [
                        { label: "Not Watched", value: "not_watched" },
                        { label: "Started", value: "started" },
                        { label: "4min Reached", value: "4min" },
                        { label: "18min Reached", value: "18min" },
                        { label: "Completed", value: "completed" }
                    ]
                },
                {
                    name: "vwo_experiment_id",
                    label: "VWO Experiment ID",
                    description: "ID —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ VWO –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    groupName: "contactinformation",
                    type: "string",
                    fieldType: "text"
                }
            ]
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    async createAllFields() {
        console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–• –ü–û–õ–ï–ô\n');

        const fields = this.getEssentialFields();
        const results = {
            deals: [],
            contacts: [],
            summary: { created: 0, existed: 0, failed: 0 }
        };

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–¥–µ–ª–æ–∫
        console.log('üíº –ü–û–õ–Ø –î–õ–Ø –°–î–ï–õ–û–ö:');
        for (const field of fields.deals) {
            const result = await this.createField('deals', field);
            results.deals.push({ field: field.name, ...result });

            if (result.success && !result.existed) results.summary.created++;
            else if (result.success && result.existed) results.summary.existed++;
            else results.summary.failed++;

            await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        console.log('\nüë§ –ü–û–õ–Ø –î–õ–Ø –ö–û–ù–¢–ê–ö–¢–û–í:');
        for (const field of fields.contacts) {
            const result = await this.createField('contacts', field);
            results.contacts.push({ field: field.name, ...result });

            if (result.success && !result.existed) results.summary.created++;
            else if (result.success && result.existed) results.summary.existed++;
            else results.summary.failed++;

            await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        }

        return results;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    async verifyFields() {
        console.log('\nüß™ –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –ü–û–õ–ï–ô:\n');

        const fields = this.getEssentialFields();
        const verification = { deals: [], contacts: [] };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å–¥–µ–ª–æ–∫
        console.log('üíº –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Å–¥–µ–ª–æ–∫:');
        for (const field of fields.deals) {
            try {
                const fieldData = await this.makeRequest(`${BASE_URL}/crm/v3/properties/deals/${field.name}`);
                console.log(`   ‚úÖ ${field.name}: ${fieldData.type} (${fieldData.options?.length || 0} –æ–ø—Ü–∏–π)`);
                verification.deals.push({ name: field.name, status: 'OK', type: fieldData.type });
            } catch (error) {
                console.log(`   ‚ùå ${field.name}: ${error.message}`);
                verification.deals.push({ name: field.name, status: 'ERROR', error: error.message });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:');
        for (const field of fields.contacts) {
            try {
                const fieldData = await this.makeRequest(`${BASE_URL}/crm/v3/properties/contacts/${field.name}`);
                console.log(`   ‚úÖ ${field.name}: ${fieldData.type} (${fieldData.options?.length || 0} –æ–ø—Ü–∏–π)`);
                verification.contacts.push({ name: field.name, status: 'OK', type: fieldData.type });
            } catch (error) {
                console.log(`   ‚ùå ${field.name}: ${error.message}`);
                verification.contacts.push({ name: field.name, status: 'ERROR', error: error.message });
            }
        }

        return verification;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    async run() {
        console.log('üöÄ –ë–ï–ó–û–ü–ê–°–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–• –ü–û–õ–ï–ô\n');

        try {
            // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è
            const results = await this.createAllFields();

            // 2. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥
            console.log('\nüìä –ò–¢–û–ì–ò –°–û–ó–î–ê–ù–ò–Ø:');
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${results.summary.created} –ø–æ–ª–µ–π`);
            console.log(`‚ö†Ô∏è –£–∂–µ –±—ã–ª–æ: ${results.summary.existed} –ø–æ–ª–µ–π`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.summary.failed} –ø–æ–ª–µ–π`);

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
            const verification = await this.verifyFields();

            // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            const report = {
                timestamp: new Date().toISOString(),
                results,
                verification,
                fields_definition: this.getEssentialFields()
            };

            fs.writeFileSync('field-creation-report.json', JSON.stringify(report, null, 2));

            console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ field-creation-report.json');
            console.log('üéâ –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–û!');

            return report;

        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            return null;
        }
    }
}

// –ó–∞–ø—É—Å–∫
const creator = new SafeFieldCreator();
creator.run();