import dotenv from 'dotenv';
import fetch from 'node-fetch';
import fs from 'fs';

dotenv.config();

const API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

class TestDealCreator {
    constructor() {
        console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω:', API_KEY ? '‚úÖ' : '‚ùå');
    }

    async makeRequest(url, method = 'GET', body = null) {
        const options = {
            method,
            headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json'
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        const response = await fetch(url, options);

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        return await response.json();
    }

    // –ü–æ–ª—É—á–∏—Ç—å Portal ID –¥–ª—è —Å—Å—ã–ª–∫–∏
    async getPortalId() {
        try {
            const accountInfo = await this.makeRequest(`${BASE_URL}/account-info/v3/details`);
            return accountInfo.portalId;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Portal ID:', error.message);
            return null;
        }
    }

    // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    async createTestContact() {
        const contactData = {
            properties: {
                firstname: "–¢–µ—Å—Ç",
                lastname: "–ö–ª–∏–µ–Ω—Ç –î–∞—à–±–æ—Ä–¥–∞",
                email: `test.dashboard.${Date.now()}@example.com`, // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email
                phone: "+972501234567",

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –ø–æ–ª—è (–±–µ–∑ problematic source)
                vsl_watched: "18min",
                vwo_experiment_id: "EXP_001_VSL_TEST_2025",

                // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                lifecyclestage: "lead"
            }
        };

        try {
            console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞...');
            const contact = await this.makeRequest(`${BASE_URL}/crm/v3/objects/contacts`, 'POST', contactData);
            console.log(`‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${contact.id}`);
            return contact;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error.message);
            return null;
        }
    }

    // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    async createTestDeal() {
        const dealData = {
            properties: {
                dealname: `üß™ –¢–ï–°–¢ Dashboard - ${new Date().toLocaleString('ru')}`,
                amount: "4500",
                dealstage: "qualifiedtobuy",

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –ø–æ–ª—è
                trial_status: "trial_converted",
                qualified_status: "highly_qualified",

                // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                deal_whole_amount: "4500",
                closedate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
            }
        };

        try {
            console.log('üíº –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏...');
            const deal = await this.makeRequest(`${BASE_URL}/crm/v3/objects/deals`, 'POST', dealData);
            console.log(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${deal.id}`);
            return deal;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error.message);
            return null;
        }
    }

    // –°–≤—è–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ —Å–¥–µ–ª–∫–æ–π
    async associateContactToDeal(contactId, dealId) {
        try {
            console.log('üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ —Å–¥–µ–ª–∫–æ–π...');

            const associationData = {
                inputs: [{
                    from: { id: dealId },
                    to: { id: contactId },
                    type: "deal_to_contact"
                }]
            };

            await this.makeRequest(
                `${BASE_URL}/crm/v4/associations/deals/contacts/batch/create`,
                'POST',
                associationData
            );

            console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–≤—è–∑–∞–Ω —Å–æ —Å–¥–µ–ª–∫–æ–π');
            return true;
        } catch (error) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:', error.message);
            return false;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    async createFullTestData() {
        console.log('üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –° –ù–û–í–´–ú–ò –ü–û–õ–Ø–ú–ò\n');

        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º Portal ID
            const portalId = await this.getPortalId();
            console.log(`üè¢ Portal ID: ${portalId}`);

            // 2. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            const contact = await this.createTestContact();
            if (!contact) throw new Error('–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω');

            await new Promise(resolve => setTimeout(resolve, 1000));

            // 3. –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
            const deal = await this.createTestDeal();
            if (!deal) throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');

            await new Promise(resolve => setTimeout(resolve, 1000));

            // 4. –°–≤—è–∑—ã–≤–∞–µ–º –∏—Ö
            await this.associateContactToDeal(contact.id, deal.id);

            // 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
            const contactUrl = `https://app.hubspot.com/contacts/${portalId}/record/0-1/${contact.id}`;
            const dealUrl = `https://app.hubspot.com/contacts/${portalId}/record/0-3/${deal.id}`;

            // 6. –û—Ç—á–µ—Ç
            const report = {
                success: true,
                timestamp: new Date().toISOString(),
                portal_id: portalId,
                contact: {
                    id: contact.id,
                    email: contact.properties.email,
                    url: contactUrl,
                    new_fields: {
                        vsl_watched: contact.properties.vsl_watched,
                        vwo_experiment_id: contact.properties.vwo_experiment_id
                    }
                },
                deal: {
                    id: deal.id,
                    name: deal.properties.dealname,
                    url: dealUrl,
                    new_fields: {
                        trial_status: deal.properties.trial_status,
                        qualified_status: deal.properties.qualified_status
                    }
                }
            };

            fs.writeFileSync('test-data-report.json', JSON.stringify(report, null, 2));

            // –†–µ–∑—É–ª—å—Ç–∞—Ç
            console.log('\n' + '='.repeat(80));
            console.log('üéâ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!');
            console.log('='.repeat(80));

            console.log(`\nüë§ –ö–û–ù–¢–ê–ö–¢: ${contact.properties.firstname} ${contact.properties.lastname}`);
            console.log(`   üìß Email: ${contact.properties.email}`);
            console.log(`   üé¨ VSL Watched: ${contact.properties.vsl_watched}`);
            console.log(`   üß™ VWO Experiment: ${contact.properties.vwo_experiment_id}`);
            console.log(`   üîó –°—Å—ã–ª–∫–∞: ${contactUrl}`);

            console.log(`\nüíº –°–î–ï–õ–ö–ê: ${deal.properties.dealname}`);
            console.log(`   üí∞ –°—É–º–º–∞: ${deal.properties.amount} ILS`);
            console.log(`   üéØ Trial Status: ${deal.properties.trial_status}`);
            console.log(`   ‚úÖ Qualified Status: ${deal.properties.qualified_status}`);
            console.log(`   üîó –°—Å—ã–ª–∫–∞: ${dealUrl}`);

            console.log('\nüìã –ß–¢–û –ü–†–û–í–ï–†–ò–¢–¨ –í HUBSPOT:');
            console.log('1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç');
            console.log('2Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –≤ Properties —Å–µ–∫—Ü–∏–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—è:');
            console.log('   - VSL Watched = "18min"');
            console.log('   - VWO Experiment ID = "EXP_001_VSL_TEST_2025"');
            console.log('3Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–¥–µ–ª–∫—É');
            console.log('4Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ –≤ Properties —Å–µ–∫—Ü–∏–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—è:');
            console.log('   - Trial Status = "trial_converted"');
            console.log('   - Qualified Status = "highly_qualified"');
            console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫–∞ —Å–≤—è–∑–∞–Ω—ã');

            console.log('\nüéØ –°–°–´–õ–ö–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:');
            console.log('üë§ –ö–û–ù–¢–ê–ö–¢:');
            console.log(contactUrl);
            console.log('\nüíº –°–î–ï–õ–ö–ê:');
            console.log(dealUrl);

            return report;

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞:', error.message);
            return { success: false, error: error.message };
        }
    }
}

// –ó–∞–ø—É—Å–∫
const creator = new TestDealCreator();
creator.createFullTestData();