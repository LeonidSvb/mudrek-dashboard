import 'dotenv/config';
import fetch from 'node-fetch';

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;

async function checkSyncStatus() {
  console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Supabase:\n');

  const tables = [
    { name: 'hubspot_contacts_raw', label: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' },
    { name: 'hubspot_deals_raw', label: '–°–¥–µ–ª–∫–∏' },
    { name: 'hubspot_calls_raw', label: '–ó–≤–æ–Ω–∫–∏' }
  ];

  for (const table of tables) {
    try {
      const res = await fetch(`${SUPABASE_URL}/rest/v1/${table.name}?select=count`, {
        headers: {
          'apikey': SUPABASE_SERVICE_KEY,
          'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
          'Prefer': 'count=exact'
        }
      });

      const range = res.headers.get('content-range');
      const count = range ? range.split('/')[1] : '0';
      console.log(`‚úÖ ${table.label}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      console.log(`‚ùå ${table.label}: –æ—à–∏–±–∫–∞ - ${error.message}`);
    }
  }

  console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');

  try {
    const res = await fetch(`${SUPABASE_URL}/rest/v1/sync_logs?select=*&order=sync_started_at.desc&limit=5`, {
      headers: {
        'apikey': SUPABASE_SERVICE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
      }
    });

    const logs = await res.json();

    if (logs && logs.length > 0) {
      logs.forEach(log => {
        const status = log.status === 'success' ? '‚úÖ' : '‚ùå';
        console.log(`\n${status} ${log.object_type}`);
        console.log(`   –í—Ä–µ–º—è: ${new Date(log.sync_started_at).toLocaleString()}`);
        console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${log.records_fetched || 0}`);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${log.records_updated || 0}`);
        console.log(`   –û—à–∏–±–æ–∫: ${log.records_failed || 0}`);
      });
    } else {
      console.log('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error.message}`);
  }
}

checkSyncStatus().catch(console.error);
