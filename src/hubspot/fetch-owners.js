import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const HUBSPOT_API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function fetchOwners() {
  console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ owners –∏–∑ HubSpot...\n');

  try {
    // Fetch owners from HubSpot
    const response = await fetch(`${BASE_URL}/crm/v3/owners?limit=100`, {
      headers: {
        'Authorization': `Bearer ${HUBSPOT_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HubSpot API error: ${response.status}`);
    }

    const data = await response.json();
    const owners = data.results;

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${owners.length} owners –≤ HubSpot:\n`);

    // Transform –¥–ª—è Supabase
    const transformedOwners = owners.map(owner => ({
      owner_id: owner.id,
      owner_name: `${owner.firstName || ''} ${owner.lastName || ''}`.trim() || owner.email,
      owner_email: owner.email
    }));

    // –ü–æ–∫–∞–∑–∞—Ç—å preview
    transformedOwners.forEach((owner, i) => {
      console.log(`${i + 1}. ${owner.owner_name} (${owner.owner_email}) - ID: ${owner.owner_id}`);
    });

    // Save to Supabase
    console.log('\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase...');

    const { data: savedData, error } = await supabase
      .from('hubspot_owners')
      .upsert(transformedOwners, {
        onConflict: 'owner_id',
        ignoreDuplicates: false
      })
      .select();

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message);
      throw error;
    }

    console.log(`\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedData.length} owners –≤ Supabase!`);

    // Check which owners are used
    console.log('\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è owners:\n');

    const { data: ownerStats } = await supabase
      .from('hubspot_deals_raw')
      .select('hubspot_owner_id')
      .not('hubspot_owner_id', 'is', null);

    const ownerCounts = {};
    ownerStats?.forEach(d => {
      ownerCounts[d.hubspot_owner_id] = (ownerCounts[d.hubspot_owner_id] || 0) + 1;
    });

    console.log('Deals per owner:');
    Object.entries(ownerCounts)
      .sort((a, b) => b[1] - a[1])
      .forEach(([ownerId, count]) => {
        const owner = transformedOwners.find(o => o.owner_id === ownerId);
        console.log(`  ${owner?.owner_name || ownerId}: ${count} deals`);
      });

    console.log('\n\nüìù –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ï–ù:');
    console.log('–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º–µ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ:');
    console.log('1. –ó–∞–π–¥–∏ –≤ Supabase Dashboard');
    console.log('2. –û—Ç–∫—Ä–æ–π —Ç–∞–±–ª–∏—Ü—É hubspot_owners');
    console.log('3. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø–æ–ª–µ owner_name (–Ω–∞–ø—Ä–∏–º–µ—Ä: "John Smith" ‚Üí "–ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤")');
    console.log('4. –î–∞—à–±–æ—Ä–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∂–µ—Ç –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞!');

  } catch (error) {
    console.error('\n–û—à–∏–±–∫–∞:', error.message);
    throw error;
  }
}

fetchOwners().catch(console.error);
