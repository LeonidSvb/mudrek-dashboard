/**
 * FETCH TEST SAMPLE: Download test data from HubSpot for dashboard testing
 *
 * Strategy:
 * 1. Fetch deals from last N days (or minimum M deals)
 * 2. Fetch contacts associated with these deals
 * 3. Fetch additional contacts to reach target count
 * 4. Fetch calls from same period
 * 5. Save to JSON files for inspection before upload
 *
 * Usage:
 *   node src/hubspot/fetch-test-sample.js
 */

import 'dotenv/config';
import { writeFileSync, mkdirSync, readFileSync } from 'fs';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// ========================================
// CONFIGURATION
// ========================================
const CONFIG = {
  // API Settings
  HUBSPOT_API_KEY: process.env.HUBSPOT_API_KEY,
  BASE_URL: 'https://api.hubapi.com',

  // Time Period
  DAYS_BACK: 30,  // Last 30 days (1 month)

  // Target Quantities
  MIN_DEALS: 50,        // Minimum deals to fetch
  TARGET_CONTACTS: 500, // Total contacts to fetch
  TARGET_CALLS: 1000,   // Total calls to fetch

  // Batch Settings
  BATCH_SIZE: 100,

  // Useful fields file (generated by analyze-full-data.js)
  USEFUL_FIELDS_FILE: join(__dirname, '../../data/hubspot-full/useful-fields.json'),

  // Output directory
  OUTPUT_DIR: join(__dirname, '../../data/test-sample'),

  // Associations to include
  ASSOCIATIONS: {
    deals: ['contacts', 'companies']
  }
};

// ========================================
// LOAD USEFUL FIELDS
// ========================================
let USEFUL_FIELDS;
try {
  const usefulFieldsJson = readFileSync(CONFIG.USEFUL_FIELDS_FILE, 'utf8');
  USEFUL_FIELDS = JSON.parse(usefulFieldsJson);
  console.log('‚úì Loaded useful fields configuration');
  console.log(`  Contacts: ${USEFUL_FIELDS.contacts.length} fields`);
  console.log(`  Deals: ${USEFUL_FIELDS.deals.length} fields`);
  console.log(`  Calls: ${USEFUL_FIELDS.calls.length} fields\n`);
} catch (error) {
  console.error('‚úó Failed to load useful fields file:', CONFIG.USEFUL_FIELDS_FILE);
  console.error('  Run this first: node scripts/discovery/analyze-full-data.js');
  process.exit(1);
}

// ========================================
// HELPER FUNCTIONS
// ========================================

/**
 * Calculate Unix timestamp for N days ago (with milliseconds)
 */
function getDaysAgoTimestamp(days) {
  const now = Date.now();
  const daysInMs = days * 24 * 60 * 60 * 1000;
  return now - daysInMs;
}

/**
 * Search HubSpot objects with date filter
 */
async function searchByDate(objectType, daysBack, properties, associations = []) {
  const timestamp = getDaysAgoTimestamp(daysBack);

  const requestBody = {
    filterGroups: [{
      filters: [{
        propertyName: 'hs_lastmodifieddate',
        operator: 'GT',
        value: timestamp.toString()
      }]
    }],
    properties: properties,
    limit: CONFIG.BATCH_SIZE
  };

  if (associations.length > 0) {
    requestBody.associations = associations;
  }

  let allRecords = [];
  let after = null;
  let hasMore = true;
  let pageCount = 0;

  console.log(`üîç Searching ${objectType} modified in last ${daysBack} days...`);

  while (hasMore) {
    pageCount++;

    if (after) {
      requestBody.after = after;
    }

    try {
      const response = await fetch(`${CONFIG.BASE_URL}/crm/v3/objects/${objectType}/search`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${CONFIG.HUBSPOT_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HubSpot API error ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      allRecords = allRecords.concat(data.results);

      console.log(`  ‚Üí Page ${pageCount}: ${data.results.length} records (total: ${allRecords.length})`);

      if (data.paging?.next) {
        after = data.paging.next.after;
      } else {
        hasMore = false;
      }
    } catch (error) {
      console.error(`‚úó Failed to search ${objectType} page ${pageCount}:`, error.message);
      throw error;
    }
  }

  console.log(`‚úì Found ${allRecords.length} ${objectType} in last ${daysBack} days\n`);
  return allRecords;
}

/**
 * Fetch specific records by IDs
 */
async function fetchByIds(objectType, ids, properties) {
  if (ids.length === 0) return [];

  console.log(`üì° Fetching ${ids.length} ${objectType} by IDs...`);

  const allRecords = [];
  const batchSize = 100; // HubSpot batch read limit

  for (let i = 0; i < ids.length; i += batchSize) {
    const batchIds = ids.slice(i, i + batchSize);

    try {
      const response = await fetch(`${CONFIG.BASE_URL}/crm/v3/objects/${objectType}/batch/read`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${CONFIG.HUBSPOT_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          properties: properties,
          inputs: batchIds.map(id => ({ id }))
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HubSpot API error ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      allRecords.push(...data.results);

      console.log(`  ‚Üí Batch ${Math.floor(i / batchSize) + 1}: ${data.results.length} records`);
    } catch (error) {
      console.error(`‚úó Failed to fetch ${objectType} batch:`, error.message);
      throw error;
    }
  }

  console.log(`‚úì Fetched ${allRecords.length} ${objectType}\n`);
  return allRecords;
}

/**
 * Fetch last N records (fallback if date filter returns too few)
 */
async function fetchLastN(objectType, count, properties, associations = []) {
  console.log(`üì° Fetching last ${count} ${objectType}...`);

  const requestBody = {
    properties: properties,
    limit: CONFIG.BATCH_SIZE
  };

  if (associations.length > 0) {
    requestBody.associations = associations;
  }

  let allRecords = [];
  let after = null;
  let hasMore = true;
  let pageCount = 0;

  while (hasMore && allRecords.length < count) {
    pageCount++;

    const url = `${CONFIG.BASE_URL}/crm/v3/objects/${objectType}?limit=${CONFIG.BATCH_SIZE}&archived=false`;
    const propsParam = properties.map(p => `properties=${p}`).join('&');
    const fullUrl = `${url}&${propsParam}${after ? `&after=${after}` : ''}`;

    try {
      const response = await fetch(fullUrl, {
        headers: {
          'Authorization': `Bearer ${CONFIG.HUBSPOT_API_KEY}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HubSpot API error ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      allRecords = allRecords.concat(data.results);

      console.log(`  ‚Üí Page ${pageCount}: ${data.results.length} records (total: ${allRecords.length})`);

      if (data.paging?.next && allRecords.length < count) {
        after = data.paging.next.after;
      } else {
        hasMore = false;
      }
    } catch (error) {
      console.error(`‚úó Failed to fetch ${objectType} page ${pageCount}:`, error.message);
      throw error;
    }
  }

  const result = allRecords.slice(0, count);
  console.log(`‚úì Fetched ${result.length} ${objectType}\n`);
  return result;
}

/**
 * Save data to JSON file
 */
function saveToJSON(filename, data) {
  const filepath = join(CONFIG.OUTPUT_DIR, filename);
  mkdirSync(CONFIG.OUTPUT_DIR, { recursive: true });

  writeFileSync(filepath, JSON.stringify(data, null, 2));

  const sizeMB = (JSON.stringify(data).length / 1024 / 1024).toFixed(2);
  console.log(`‚úì Saved ${filename} (${sizeMB} MB, ${data.length} records)\n`);
}

// ========================================
// MAIN FUNCTION
// ========================================
async function fetchTestSample() {
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë     FETCH TEST SAMPLE FROM HUBSPOT       ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

  console.log('üìã Configuration:');
  console.log(`   Period: Last ${CONFIG.DAYS_BACK} days`);
  console.log(`   Target: ${CONFIG.MIN_DEALS} deals, ${CONFIG.TARGET_CONTACTS} contacts, ${CONFIG.TARGET_CALLS} calls`);
  console.log(`   Fields: ${USEFUL_FIELDS.contacts.length} + ${USEFUL_FIELDS.deals.length} + ${USEFUL_FIELDS.calls.length} = 167 useful fields`);
  console.log(`   Output: ${CONFIG.OUTPUT_DIR}\n`);

  const startTime = Date.now();
  const results = {};

  try {
    // ========================================
    // 1. FETCH DEALS
    // ========================================
    console.log('‚ïê‚ïê‚ïê 1/3: DEALS ‚ïê‚ïê‚ïê\n');

    let deals = await searchByDate('deals', CONFIG.DAYS_BACK, USEFUL_FIELDS.deals, CONFIG.ASSOCIATIONS.deals);

    // Fallback: if not enough deals in period, fetch last N
    if (deals.length < CONFIG.MIN_DEALS) {
      console.log(`‚ö†Ô∏è  Only ${deals.length} deals in last ${CONFIG.DAYS_BACK} days`);
      console.log(`   Fetching last ${CONFIG.MIN_DEALS} deals instead...\n`);
      deals = await fetchLastN('deals', CONFIG.MIN_DEALS, USEFUL_FIELDS.deals, CONFIG.ASSOCIATIONS.deals);
    }

    results.deals = deals;
    saveToJSON('deals.json', deals);

    // ========================================
    // 2. FETCH CONTACTS
    // ========================================
    console.log('‚ïê‚ïê‚ïê 2/3: CONTACTS ‚ïê‚ïê‚ïê\n');

    // Extract contact IDs from deal associations
    const associatedContactIds = new Set();
    deals.forEach(deal => {
      const contactAssociations = deal.associations?.contacts?.results || [];
      contactAssociations.forEach(assoc => {
        associatedContactIds.add(assoc.id);
      });
    });

    console.log(`üìä Found ${associatedContactIds.size} contacts associated with deals`);

    // Fetch associated contacts
    let contacts = [];
    if (associatedContactIds.size > 0) {
      contacts = await fetchByIds('contacts', Array.from(associatedContactIds), USEFUL_FIELDS.contacts);
    }

    // Fetch additional contacts if needed
    if (contacts.length < CONFIG.TARGET_CONTACTS) {
      const needed = CONFIG.TARGET_CONTACTS - contacts.length;
      console.log(`üìä Fetching ${needed} more contacts to reach target...\n`);

      const additionalContacts = await searchByDate('contacts', CONFIG.DAYS_BACK, USEFUL_FIELDS.contacts);

      // Remove duplicates (already have associated contacts)
      const existingIds = new Set(contacts.map(c => c.id));
      const uniqueAdditional = additionalContacts.filter(c => !existingIds.has(c.id));

      contacts = contacts.concat(uniqueAdditional.slice(0, needed));
    }

    results.contacts = contacts.slice(0, CONFIG.TARGET_CONTACTS);
    saveToJSON('contacts.json', results.contacts);

    // ========================================
    // 3. FETCH CALLS
    // ========================================
    console.log('‚ïê‚ïê‚ïê 3/3: CALLS ‚ïê‚ïê‚ïê\n');

    let calls = await searchByDate('calls', CONFIG.DAYS_BACK, USEFUL_FIELDS.calls);

    // Truncate to target if too many
    if (calls.length > CONFIG.TARGET_CALLS) {
      calls = calls.slice(0, CONFIG.TARGET_CALLS);
    }

    results.calls = calls;
    saveToJSON('calls.json', calls);

    // ========================================
    // SUMMARY
    // ========================================
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);

    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë               SUMMARY                      ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

    console.log(`‚úì Deals: ${results.deals.length} records`);
    console.log(`  - ${USEFUL_FIELDS.deals.length} useful fields per record`);
    console.log(`  - Associations: ${results.deals.filter(d => d.associations).length} have contacts\n`);

    console.log(`‚úì Contacts: ${results.contacts.length} records`);
    console.log(`  - ${USEFUL_FIELDS.contacts.length} useful fields per record`);
    console.log(`  - Associated with deals: ${associatedContactIds.size}\n`);

    console.log(`‚úì Calls: ${results.calls.length} records`);
    console.log(`  - ${USEFUL_FIELDS.calls.length} useful fields per record\n`);

    console.log(`‚è±Ô∏è  Total duration: ${duration}s`);
    console.log(`üíæ Data saved to: ${CONFIG.OUTPUT_DIR}`);
    console.log(`\nüí° Next step: node src/hubspot/upload-test-sample.js`);

  } catch (error) {
    console.error('\n‚ùå Fetch failed:', error.message);
    throw error;
  }
}

// Run
fetchTestSample().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});
