import dotenv from 'dotenv';
import fetch from 'node-fetch';

dotenv.config();

const HUBSPOT_API_KEY = process.env.HUBSPOT_API_KEY;
const BASE_URL = 'https://api.hubapi.com';

async function makeHubSpotRequest(endpoint, options = {}) {
    const url = `${BASE_URL}${endpoint}`;

    const defaultOptions = {
        headers: {
            'Authorization': `Bearer ${HUBSPOT_API_KEY}`,
            'Content-Type': 'application/json'
        }
    };

    const requestOptions = { ...defaultOptions, ...options };

    try {
        const response = await fetch(url, requestOptions);
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP Error: ${response.status} - ${response.statusText}. Response: ${errorText}`);
        }
        return await response.json();
    } catch (error) {
        console.error('HubSpot API Error:', error);
        throw error;
    }
}

async function getSampleContacts() {
    try {
        console.log('üìã –ü–æ–ª—É—á–∞—é 10 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏...\n');

        const response = await makeHubSpotRequest('/crm/v3/objects/contacts?limit=10');

        if (response.results && response.results.length > 0) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.results.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n`);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            const firstContact = response.results[0];
            console.log('üìä –°–¢–†–£–ö–¢–£–†–ê –ö–û–ù–¢–ê–ö–¢–ê:');
            console.log(`ID: ${firstContact.id}`);
            console.log(`Created: ${firstContact.createdAt}`);
            console.log(`Updated: ${firstContact.updatedAt}\n`);

            console.log('üè∑Ô∏è  –î–û–°–¢–£–ü–ù–´–ï –°–í–û–ô–°–¢–í–ê –ö–û–ù–¢–ê–ö–¢–û–í:');
            const properties = Object.keys(firstContact.properties);
            console.log(`–í—Å–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤: ${properties.length}\n`);

            properties.forEach((prop, index) => {
                const value = firstContact.properties[prop];
                console.log(`${(index + 1).toString().padStart(2, '0')}. ${prop.padEnd(30)} = ${value || 'null'}`);
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            console.log('\nüìã –ü–†–ò–ú–ï–†–´ –ö–û–ù–¢–ê–ö–¢–û–í:');
            response.results.slice(0, 5).forEach((contact, index) => {
                console.log(`\n${index + 1}. ID: ${contact.id}`);
                console.log(`   Email: ${contact.properties.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`   –ò–º—è: ${contact.properties.firstname || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${contact.properties.lastname || ''}`);
                console.log(`   –ö–æ–º–ø–∞–Ω–∏—è: ${contact.properties.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${contact.properties.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`   –°–æ–∑–¥–∞–Ω: ${contact.properties.createdate || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
            });

            return response.results;
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error.message);
        throw error;
    }
}

async function getSampleDeals() {
    try {
        console.log('\nüíº –ü–æ–ª—É—á–∞—é 10 —Å–¥–µ–ª–æ–∫ —Å –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏...\n');

        const response = await makeHubSpotRequest('/crm/v3/objects/deals?limit=10');

        if (response.results && response.results.length > 0) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.results.length} —Å–¥–µ–ª–æ–∫\n`);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            const firstDeal = response.results[0];
            console.log('üí∞ –°–¢–†–£–ö–¢–£–†–ê –°–î–ï–õ–ö–ò:');
            console.log(`ID: ${firstDeal.id}`);
            console.log(`Created: ${firstDeal.createdAt}`);
            console.log(`Updated: ${firstDeal.updatedAt}\n`);

            console.log('üè∑Ô∏è  –î–û–°–¢–£–ü–ù–´–ï –°–í–û–ô–°–¢–í–ê –°–î–ï–õ–û–ö:');
            const properties = Object.keys(firstDeal.properties);
            console.log(`–í—Å–µ–≥–æ —Å–≤–æ–π—Å—Ç–≤: ${properties.length}\n`);

            properties.forEach((prop, index) => {
                const value = firstDeal.properties[prop];
                console.log(`${(index + 1).toString().padStart(2, '0')}. ${prop.padEnd(30)} = ${value || 'null'}`);
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–¥–µ–ª–æ–∫
            console.log('\nüíº –ü–†–ò–ú–ï–†–´ –°–î–ï–õ–û–ö:');
            response.results.slice(0, 5).forEach((deal, index) => {
                console.log(`\n${index + 1}. ID: ${deal.id}`);
                console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${deal.properties.dealname || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
                console.log(`   –°—É–º–º–∞: ${deal.properties.amount || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                console.log(`   –°—Ç–∞–¥–∏—è: ${deal.properties.dealstage || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü: ${deal.properties.hubspot_owner_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`   –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${deal.properties.closedate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
                console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${deal.properties.createdate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            });

            return response.results;
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫:', error.message);
        throw error;
    }
}

async function analyzeSampleData() {
    try {
        console.log('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• HUBSPOT\n');
        console.log('=' .repeat(80));

        const contacts = await getSampleContacts();
        const deals = await getSampleDeals();

        console.log('\n' + '='.repeat(80));
        console.log('üìä –ê–ù–ê–õ–ò–ó –î–õ–Ø –î–ê–®–ë–û–†–î–ê:');
        console.log('=' .repeat(80));

        // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        if (contacts && contacts.length > 0) {
            console.log('\nüìã –ö–õ–Æ–ß–ï–í–´–ï –ü–û–õ–Ø –ö–û–ù–¢–ê–ö–¢–û–í –î–õ–Ø –î–ê–®–ë–û–†–î–ê:');
            const keyContactFields = [
                'email', 'firstname', 'lastname', 'company', 'phone',
                'createdate', 'lastmodifieddate', 'hs_lead_status',
                'lifecyclestage', 'hubspot_owner_id'
            ];

            keyContactFields.forEach(field => {
                const hasValue = contacts.some(c => c.properties[field]);
                console.log(`   ${field.padEnd(25)} - ${hasValue ? '‚úÖ –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '‚ùå –ü—É—Å—Ç–æ–µ'}`);
            });
        }

        if (deals && deals.length > 0) {
            console.log('\nüíº –ö–õ–Æ–ß–ï–í–´–ï –ü–û–õ–Ø –°–î–ï–õ–û–ö –î–õ–Ø –î–ê–®–ë–û–†–î–ê:');
            const keyDealFields = [
                'dealname', 'amount', 'dealstage', 'pipeline',
                'closedate', 'createdate', 'hubspot_owner_id',
                'amount_in_home_currency'
            ];

            keyDealFields.forEach(field => {
                const hasValue = deals.some(d => d.properties[field]);
                console.log(`   ${field.padEnd(25)} - ${hasValue ? '‚úÖ –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '‚ùå –ü—É—Å—Ç–æ–µ'}`);
            });
        }

        console.log('\nüöÄ –ì–æ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞!');

    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeSampleData();